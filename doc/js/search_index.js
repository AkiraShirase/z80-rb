var search_data = {"index":{"searchIndex":["symbol","z80","alloc","compileerror","helpers","label","program","condition","mnemonics","register","syntax","tap","tapeerror","z80lib","macros","z80mathint","macros","+()","+()","+()","+@()","+@()","-()","-()","-()",">>()",">>()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","add_code()","add_reloc()","adda_to()","addr()","bit8?()","byte()","bytes()","clrmem()","clrmem8()","cpl()","data()","db()","debug()","deep_clone_with_relocation()","deep_clone_with_relocation()","dummy()","dummy?()","dummy?()","dup()","dw()","export()","h()","hb()","immediate?()","immediate?()","import()","import_file()","initialize()","label()","label_defined?()","macro()","match16?()","members_of_struct()","memcpy()","method_missing()","method_missing()","method_missing()","mul8()","mul8_c()","multi16_32()","name=()","name=()","names()","names()","neg()","new()","new()","new()","new()","new()","ns()","one_of?()","org()","pc()","pointer?()","pointer?()","pointer?()","read_data()","reinitialize()","reinitialize()","respond_to_missing?()","save_tap()","size()","sub_from()","to_alloc()","to_alloc()","to_data()","to_debug()","to_i()","to_i()","to_i()","to_i()","to_i()","to_label()","to_label()","to_label()","to_name()","to_name()","to_s()","to_s()","to_str()","to_str()","to_tap()","union()","word()","words()","|()","readme"],"longSearchIndex":["symbol","z80","z80::alloc","z80::compileerror","z80::helpers","z80::label","z80::program","z80::program::condition","z80::program::mnemonics","z80::program::register","z80::syntax","z80::tap","z80::tap::tapeerror","z80lib","z80lib::macros","z80mathint","z80mathint::macros","z80::alloc#+()","z80::label#+()","z80::program::register#+()","z80::alloc#+@()","z80::label#+@()","z80::alloc#-()","z80::label#-()","z80::program::register#-()","z80::alloc#>>()","z80::label#>>()","z80#[]()","z80::alloc#[]()","z80::label#[]()","z80::program#[]()","z80::program::condition::[]()","z80::program::register#[]()","z80::program::register::[]()","z80::add_code()","z80::add_reloc()","z80mathint::macros#adda_to()","z80::program#addr()","z80::program::register#bit8?()","z80::label::byte()","z80::program#bytes()","z80lib::macros#clrmem()","z80lib::macros#clrmem8()","z80::helpers#cpl()","z80::program#data()","z80::program#db()","z80#debug()","z80::alloc#deep_clone_with_relocation()","z80::label#deep_clone_with_relocation()","z80::label::dummy()","z80::alloc#dummy?()","z80::label#dummy?()","z80::alloc#dup()","z80::program#dw()","z80::program#export()","z80::helpers#h()","z80::helpers#hb()","z80::alloc#immediate?()","z80::label#immediate?()","z80::program#import()","z80::program#import_file()","z80::label#initialize()","z80::program#label()","z80::program#label_defined?()","z80::program#macro()","z80::program::register#match16?()","z80::label::members_of_struct()","z80lib::macros#memcpy()","z80::alloc#method_missing()","z80::label#method_missing()","z80::program#method_missing()","z80mathint::macros#mul8()","z80mathint::macros#mul8_c()","z80mathint::macros#multi16_32()","z80::alloc#name=()","z80::label#name=()","z80::program::condition::names()","z80::program::register::names()","z80::helpers#neg()","z80::alloc::new()","z80::label::new()","z80::program#new()","z80::program::condition::new()","z80::program::register::new()","z80::program#ns()","z80::program::register#one_of?()","z80::program#org()","z80::program#pc()","z80::alloc#pointer?()","z80::label#pointer?()","z80::program::register#pointer?()","z80::tap::read_data()","z80::alloc#reinitialize()","z80::label#reinitialize()","z80::label#respond_to_missing?()","z80::tap#save_tap()","z80::program::register#size()","z80mathint::macros#sub_from()","z80::alloc#to_alloc()","z80::label#to_alloc()","z80::label::to_data()","z80::program::register#to_debug()","z80::alloc#to_i()","z80::label#to_i()","z80::label::to_i()","z80::program::condition#to_i()","z80::program::register#to_i()","symbol#to_label()","z80::alloc#to_label()","z80::label#to_label()","z80::alloc#to_name()","z80::label#to_name()","z80::alloc#to_s()","z80::label#to_s()","z80::alloc#to_str()","z80::label#to_str()","z80::tap#to_tap()","z80::program#union()","z80::label::word()","z80::program#words()","z80::program::register#|()",""],"info":[["Symbol","","Symbol.html","",""],["Z80","","Z80.html","","<p>Include this module in your program class to turn it to a powerfull Z80 macro assembler.\n<p><strong>To fully use</strong> ...\n"],["Z80::Alloc","","Z80/Alloc.html","","<p>Alloc class is used internally by relocation mechanizm. See Label instead.\n"],["Z80::CompileError","","Z80/CompileError.html","","<p>Error raised during program compilation (while creating instance).\n"],["Z80::Helpers","","Z80/Helpers.html","","<p>some useless stuff; needed for z80 opcode testing; but didn’t delete it\n(maybe will come in handy)\n"],["Z80::Label","","Z80/Label.html","","<p>Label class is the CORE of relocation mechanizm:\n\n<pre>mylabel ld  a, [hl]\n        inc hl\n        djnz mylabel</pre>\n"],["Z80::Program","","Z80/Program.html","",""],["Z80::Program::Condition","","Z80/Program/Condition.html","","<p>Creates <code>jr/jp/ret/call</code> conditions as constants:\n\n<pre>NZ Z NC C PO PE P M</pre>\n<p>You must not use this class directly. …\n"],["Z80::Program::Mnemonics","","Z80/Program/Mnemonics.html","","<p>Z80 Mnemonics\n<p>All Z80 instructions are created as singleton methods. They produce machine\ncode which is …\n"],["Z80::Program::Register","","Z80/Program/Register.html","","<p>Z80 registers are populated as singleton methods. You must not create\ninstances of this class directly. …\n"],["Z80::Syntax","","Z80/Syntax.html","","<p>Error raised during program parsing.\n"],["Z80::TAP","","Z80/TAP.html","","<p>Adds TAP format support to program.\n<p>Inside your <strong>program</strong> add:\n\n<pre>include Z80::TAP</pre>\n"],["Z80::TAP::TapeError","","Z80/TAP/TapeError.html","",""],["Z80Lib","","Z80Lib.html","",""],["Z80Lib::Macros","","Z80Lib/Macros.html","",""],["Z80MathInt","","Z80MathInt.html","",""],["Z80MathInt::Macros","","Z80MathInt/Macros.html","",""],["+","Z80::Alloc","Z80/Alloc.html#method-i-2B","(other)",""],["+","Z80::Label","Z80/Label.html#method-i-2B","(offset)","<p>Returns label indexed by <code>index</code> but not as a pointer. Returns\nlabel offset by <code>offset</code>. It can be an integer …\n"],["+","Z80::Program::Register","Z80/Program/Register.html#method-i-2B","(other)","<p>This method makes possible to write indexed expressions with\n<code>ix/iy</code> registers. Example:\n\n<pre>ld a, [ix + 7]</pre>\n"],["+@","Z80::Alloc","Z80/Alloc.html#method-i-2B-40","()",""],["+@","Z80::Label","Z80/Label.html#method-i-2B-40","()","<p>Returns size (type size) of a label.\n"],["-","Z80::Alloc","Z80/Alloc.html#method-i-2D","(other)",""],["-","Z80::Label","Z80/Label.html#method-i-2D","(offset)","<p>Returns label offset by negative <code>offset</code>. It can be an integer\nor another label.\n"],["-","Z80::Program::Register","Z80/Program/Register.html#method-i-2D","(other)","<p>This method makes possible to write indexed expressions with\n<code>ix/iy</code> registers. Example:\n\n<pre>ld a, [ix - 7]</pre>\n"],[">>","Z80::Alloc","Z80/Alloc.html#method-i-3E-3E","(m)",""],[">>","Z80::Label","Z80/Label.html#method-i-3E-3E","(m)","<p>Returns a member <code>m</code> as a separate label.\n"],["[]","Z80","Z80.html#method-i-5B-5D","(label)","<p>Returns relocated label value\n"],["[]","Z80::Alloc","Z80/Alloc.html#method-i-5B-5D","(index = nil)",""],["[]","Z80::Label","Z80/Label.html#method-i-5B-5D","(index = nil)","<p>Returns label indexed by <code>index</code>. If <code>index</code> is nil,\nreturns pointer\n"],["[]","Z80::Program","Z80/Program.html#method-i-5B-5D","(label)","<p>Method used internally by mnemonics to make pointer of a label.\n<p>Example:\n\n<pre>ld  hl, [label]</pre>\n"],["[]","Z80::Program::Condition","Z80/Program/Condition.html#method-c-5B-5D","(index)",""],["[]","Z80::Program::Register","Z80/Program/Register.html#method-i-5B-5D","(index = 0)","<p>Method used internally by mnemonics to make pointer of a label or register.\nExample:\n\n<pre>ld  b, [ix + 2]\nld ...</pre>\n"],["[]","Z80::Program::Register","Z80/Program/Register.html#method-c-5B-5D","(index)",""],["add_code","Z80","Z80.html#method-c-add_code","(prg, data, type = 1, mnemo = nil, *mpar)","<p>Method used by Program instructions was placed here to not pollute\n<strong>program</strong> namespace\n"],["add_reloc","Z80","Z80.html#method-c-add_reloc","(prg, label, size, offset = 0, from = nil)","<p>Method used by Program instructions was placed here to not pollute\n<strong>program</strong> namespace\n"],["adda_to","Z80MathInt::Macros","Z80MathInt/Macros.html#method-i-adda_to","(h, l)","<p>adds a to h,l uses: <code>a</code>, <code>h</code>, <code>l</code>\n<p>h &mdash; register input accumulator hi\n<p>l &mdash; register input accumulator lo\n"],["addr","Z80::Program","Z80/Program.html#method-i-addr","(address, type = 1)","<p>Creates absolute label at <code>address</code> of (optional)\n<code>type</code>\n<p>Example:\n\n<pre>foo addr 0xffff\nbar addr 0x4000, 2</pre>\n"],["bit8?","Z80::Program::Register","Z80/Program/Register.html#method-i-bit8-3F","()",""],["byte","Z80::Label","Z80/Label.html#method-c-byte","(size = 1)","<p>Struct definition type.\n"],["bytes","Z80::Program","Z80/Program.html#method-i-bytes","(*args)","<p>Creates a label and allocate bytes with Program.data.\n<p>Shortcut for:\n\n<pre>data 1, ...</pre>\n"],["clrmem","Z80Lib::Macros","Z80Lib/Macros.html#method-i-clrmem","(dest, size, value = 0)","<p>clears memory at dest  uses: <code>bc</code>, <code>de</code>,\n<code>hl</code>\n<p>dest &mdash; register16/value/nil destination address\n<p>size &mdash; register/value/nil …\n"],["clrmem8","Z80Lib::Macros","Z80Lib/Macros.html#method-i-clrmem8","(dest, size, value = 0, rr = hl)","<p>clears max 256 bytes of memory at dest  uses: <code>a</code>,\n<code>b</code>, <code>rr</code>\n<p>dest &mdash; register16/value/nil destination address\n<p>size … &mdash; "],["cpl","Z80::Helpers","Z80/Helpers.html#method-i-cpl","(a)",""],["data","Z80::Program","Z80/Program.html#method-i-data","(type = 1, size = nil, *args)","<p>Creates relocable label and adds data to Program.code at Program.pc. The\ndata size will be of <code>type.to_i</code> …\n"],["db","Z80::Program","Z80/Program.html#method-i-db","(*args)","<p>Creates a label and allocate bytes with Program.data.\n<p>Shortcut for:\n\n<pre>data 1, [...]</pre>\n"],["debug","Z80","Z80.html#method-i-debug","()","<p>Creates debugger view from instance of a program. Returns an Array of\nStrings.\n<p>Example debugger output: …\n"],["deep_clone_with_relocation","Z80::Alloc","Z80/Alloc.html#method-i-deep_clone_with_relocation","(addr)",""],["deep_clone_with_relocation","Z80::Label","Z80/Label.html#method-i-deep_clone_with_relocation","(addr)",""],["dummy","Z80::Label","Z80/Label.html#method-c-dummy","(name = nil)","<p>Creates a dummy label. Do not use it directly. This is called when\nreferenced label has not been yet …\n"],["dummy?","Z80::Alloc","Z80/Alloc.html#method-i-dummy-3F","()",""],["dummy?","Z80::Label","Z80/Label.html#method-i-dummy-3F","()","<p>Checks if label is dummy. Do not use it directly. This method is being used\nduring program compilation. …\n"],["dup","Z80::Alloc","Z80/Alloc.html#method-i-dup","()",""],["dw","Z80::Program","Z80/Program.html#method-i-dw","(*args)","<p>Creates a label and allocate bytes with Program.data.\n<p>Shortcut for:\n\n<pre>data 2, [...]</pre>\n"],["export","Z80::Program","Z80/Program.html#method-i-export","(label)","<p>Exports <code>label</code>. This will allow other programs to\nProgram.import it. All members of <code>label</code> will also be …\n"],["h","Z80::Helpers","Z80/Helpers.html#method-i-h","(a)",""],["hb","Z80::Helpers","Z80/Helpers.html#method-i-hb","(a)",""],["immediate?","Z80::Alloc","Z80/Alloc.html#method-i-immediate-3F","()",""],["immediate?","Z80::Label","Z80/Label.html#method-i-immediate-3F","()","<p>Checks if label is absolute (<code>true</code>) or relocable\n(<code>false</code>). Do not use it directly. This method is being …\n"],["import","Z80::Program","Z80/Program.html#method-i-import","(name, program = nil, flags = {})","<p>Import code, labels and macros from other <code>program</code>. Give\n(optional) <code>name</code> for namespace. Without <code>name</code>\nlabels …\n"],["import_file","Z80::Program","Z80/Program.html#method-i-import_file","(file, type = :any, size = nil, args = {})","<p>Import binary file.\n<p><code>file</code> is a filename.\n<p><code>type</code> specifies format of binary file (as Symbol), if\n<code>:any</code> -&gt; ...\n"],["initialize","Z80::Label","Z80/Label.html#method-i-initialize","(address, type = 1, reloc = nil, members = nil)",""],["label","Z80::Program","Z80/Program.html#method-i-label","(type = 1)","<p>Creates relocable label at Program.pc of (optional) <code>type</code>.\n<p>Example:\n\n<pre>foo label\nbar label 2</pre>\n"],["label_defined?","Z80::Program","Z80/Program.html#method-i-label_defined-3F","(name)","<p>True if label <code>name</code> is defined in current context\n"],["macro","Z80::Program","Z80/Program.html#method-i-macro","(name, *registers, &mblock)","<p>Convenience method to create macros. Give a <code>name</code> (Symbol) for\nmacro, (optional) list of <code>registers</code> to …\n"],["match16?","Z80::Program::Register","Z80/Program/Register.html#method-i-match16-3F","(other)","<p>Checks if <code>self</code> can adjoin with <code>other</code>:\n<code>self</code>|<code>other</code>\n"],["members_of_struct","Z80::Label","Z80/Label.html#method-c-members_of_struct","()",""],["memcpy","Z80Lib::Macros","Z80Lib/Macros.html#method-i-memcpy","(dest=de, source=hl, size=bc, reverse = false)","<p>copies memory from source to dest if source/dest and size are static\ndetects memory overlaps uses: <code>bc</code> …\n"],["method_missing","Z80::Alloc","Z80/Alloc.html#method-i-method_missing","(m)",""],["method_missing","Z80::Label","Z80/Label.html#method-i-method_missing","(m)",""],["method_missing","Z80::Program","Z80/Program.html#method-i-method_missing","(m, label = nil)","<p>If no method <code>m</code> is defined assume it is a label. Label with no\narguments is a label being referenced. …\n"],["mul8","Z80MathInt::Macros","Z80MathInt/Macros.html#method-i-mul8","(mh=h, ml=l, m=a, th=d, tl=e, clrhl = true, double = false)","<p>performs multiplication 16bit mh, ml * 8bit m using (m, hl, th|tl) -&gt; hl\n(optionally) adds result …\n"],["mul8_c","Z80MathInt::Macros","Z80MathInt/Macros.html#method-i-mul8_c","(mh=h, ml=l, m=a, th=d, tl=e, clrhl = true)","<p>performs multiplication 16bit mh, ml * 8bit m using (m, hl, th|tl) -&gt; hl\nbreaks on carry out with …\n"],["multi16_32","Z80MathInt::Macros","Z80MathInt/Macros.html#method-i-multi16_32","(mh, ml, rr)","<p>multiply hl by mh|ml (b|c or d|e) and stores result in hl rr (bc | de)\n<strong>UNTESTED</strong>\n"],["name=","Z80::Alloc","Z80/Alloc.html#method-i-name-3D","(value)",""],["name=","Z80::Label","Z80/Label.html#method-i-name-3D","(value)","<p>Gives name to no-name label. Do not use it directly.\n"],["names","Z80::Program::Condition","Z80/Program/Condition.html#method-c-names","()",""],["names","Z80::Program::Register","Z80/Program/Register.html#method-c-names","()",""],["neg","Z80::Helpers","Z80/Helpers.html#method-i-neg","(a)",""],["new","Z80::Alloc","Z80/Alloc.html#method-c-new","(label)",""],["new","Z80::Label","Z80/Label.html#method-c-new","(addr, type = 1, reloc = nil, members = nil)","<p>Creates an instance of a label. Do not use it directly. Use Program.data,\nProgram.label, Program.addr …\n"],["new","Z80::Program","Z80/Program.html#method-i-new","(start = 0x0000, *args)","<p>Compiles <strong>program</strong> at <code>start</code> address passing\n*args to initialize(). Returns compiled instance of a\n<strong>program</strong> …\n"],["new","Z80::Program::Condition","Z80/Program/Condition.html#method-c-new","(name, opc)",""],["new","Z80::Program::Register","Z80/Program/Register.html#method-c-new","(name, opc)",""],["ns","Z80::Program","Z80/Program.html#method-i-ns","(name = nil)","<p>Creates namespace for labels defined inside code. Give a block of code\ncontaining labels or other namespaces …\n"],["one_of?","Z80::Program::Register","Z80/Program/Register.html#method-i-one_of-3F","(ary)",""],["org","Z80::Program","Z80/Program.html#method-i-org","(address, pad = 0)","<p>Creates offset from Program.pc to <code>address</code> padding it with\n<code>pad</code>. Do not confuse it with assembler directive …\n"],["pc","Z80::Program","Z80/Program.html#method-i-pc","()","<p>Current program counter relative to 0.\n"],["pointer?","Z80::Alloc","Z80/Alloc.html#method-i-pointer-3F","()",""],["pointer?","Z80::Label","Z80/Label.html#method-i-pointer-3F","()","<p>Checks if label is a pointer. Do not use it directly. This method is being\nused during program compilation. …\n"],["pointer?","Z80::Program::Register","Z80/Program/Register.html#method-i-pointer-3F","()",""],["read_data","Z80::TAP","Z80/TAP.html#method-c-read_data","(file, args = {})","<p>Program.import_file uses this method to read from TAP file.\n"],["reinitialize","Z80::Alloc","Z80/Alloc.html#method-i-reinitialize","(*args)",""],["reinitialize","Z80::Label","Z80/Label.html#method-i-reinitialize","(address, type = 1, reloc = nil, members = nil)","<p>Reinitializes dummy label. Do not use it directly. This method is being\nused during program compilation. …\n"],["respond_to_missing?","Z80::Label","Z80/Label.html#method-i-respond_to_missing-3F","(m, include_private=false)",""],["save_tap","Z80::TAP","Z80/TAP.html#method-i-save_tap","(file, options = {})","<p>Saves Program#code in TAP file.\n<p><code>file</code>    specifies filename.\n<p><code>options</code>\n"],["size","Z80::Program::Register","Z80/Program/Register.html#method-i-size","()",""],["sub_from","Z80MathInt::Macros","Z80MathInt/Macros.html#method-i-sub_from","(r, h, l)","<p>subs r from h,l uses: <code>a</code>, <code>r</code>, <code>h</code>,\n<code>l</code>\n<p>r &mdash; register subtractor must not be <code>a</code>\n<p>h &mdash; register input accumulator hi\n"],["to_alloc","Z80::Alloc","Z80/Alloc.html#method-i-to_alloc","()",""],["to_alloc","Z80::Label","Z80/Label.html#method-i-to_alloc","()",""],["to_data","Z80::Label","Z80/Label.html#method-c-to_data","(prog, offset, data)","<p>Used by Program.data. Do not use it directly. data must be a Hash, Array,\nString or convertible Object …\n"],["to_debug","Z80::Program::Register","Z80/Program/Register.html#method-i-to_debug","()",""],["to_i","Z80::Alloc","Z80/Alloc.html#method-i-to_i","(start = 0, rel_to = nil)",""],["to_i","Z80::Label","Z80/Label.html#method-i-to_i","(start = 0, rel_to = nil)","<p>Evaluates label. Do not use it directly. This method is being used during\nprogram compilation.\n"],["to_i","Z80::Label","Z80/Label.html#method-c-to_i","()",""],["to_i","Z80::Program::Condition","Z80/Program/Condition.html#method-i-to_i","()",""],["to_i","Z80::Program::Register","Z80/Program/Register.html#method-i-to_i","()",""],["to_label","Symbol","Symbol.html#method-i-to_label","(program)","<p>Allows to use Symbols instead of labels in some situations. Example:\n\n<pre>loop1 add [hl]\n      inc hl\n     ...</pre>\n"],["to_label","Z80::Alloc","Z80/Alloc.html#method-i-to_label","(_)",""],["to_label","Z80::Label","Z80/Label.html#method-i-to_label","(_)",""],["to_name","Z80::Alloc","Z80/Alloc.html#method-i-to_name","()",""],["to_name","Z80::Label","Z80/Label.html#method-i-to_name","()","<p>Returns label name or <code>nil</code>.\n"],["to_s","Z80::Alloc","Z80/Alloc.html#method-i-to_s","()",""],["to_s","Z80::Label","Z80/Label.html#method-i-to_s","()",""],["to_str","Z80::Alloc","Z80/Alloc.html#method-i-to_str","()",""],["to_str","Z80::Label","Z80/Label.html#method-i-to_str","()",""],["to_tap","Z80::TAP","Z80/TAP.html#method-i-to_tap","(name)","<p>Wraps Program#code inside TAP format.\n<p><code>name</code> can contain max 10 ascii (7-bit) characters.\n\n"],["union","Z80::Program","Z80/Program.html#method-i-union","(label, type)","<p>Creates a label at <code>label</code> of different <code>type</code>.\n<p>Example:\n\n<pre>foo label\nbar union foo, 2</pre>\n"],["word","Z80::Label","Z80/Label.html#method-c-word","(size = 1)","<p>Struct definition type.\n"],["words","Z80::Program","Z80/Program.html#method-i-words","(*args)","<p>Creates a label and allocate words with Program.data.\n<p>Shortcut for:\n\n<pre>data 2, ...</pre>\n"],["|","Z80::Program::Register","Z80/Program/Register.html#method-i-7C","(other)","<p>Adjoins two 8 bit registers to form one 16 bit register. Usefull when\ndefining macros that may use registers …\n"],["README","","README_txt.html","","<p>ruby-Z80\n<p>A Z80 assembler powered by ruby.\n<p>Author &mdash; Rafał Michalski  (royaltm75@gmail.com)\n"]]}}