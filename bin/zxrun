#!/usr/bin/env ruby
# -*- coding: BINARY -*-
ZXRUN_VERSION = '0.2'
HELP = <<_EOH_
ZXRUN #{ZXRUN_VERSION}: Run ZX Spectrum programs in an emulator.
Usage:
#{File.basename($0)} [sources] program [-- emulator args, ...]

  sources: should be one or more paths to z80rb sources that are being compiled
           prior to loading ZX Spectrum emulator
           (the .rb extension is optional),
  program: a path to a TAP/TZX file to be run in an emulator
           (the .tap/.tzx extension is optional)

  Environment: ZXEMU_PATH=/path/to/emulator
_EOH_

require 'rbconfig'

RUBY = File.join(RbConfig::CONFIG['bindir'], RbConfig::CONFIG['ruby_install_name']).sub(/.*\s.*/m, '"\&"')

args_start = lambda { |arg| arg != '--' }

*sources, program = ARGV.take_while(&args_start)

if program.nil?
  puts HELP; exit
end

_, *emu_args = ARGV.drop_while(&args_start)

def normalize_file(filepath, extension, exit_on_missing = true)
  dir, base = File.dirname(filepath), File.basename(filepath, extension)
  normpath = File.join(dir, base + extension)
  if File.exist?(normpath)
    normpath
  elsif exit_on_missing
    $stderr.puts "ZXRUN: No such source: #{filepath}"
    exit 1
  end
end

sources.map {|source| normalize_file(source, '.rb') }.each do |source|
  unless system RUBY, source
    code = $?
    $stderr.puts "ZXRUN: compiling #{source.inspect} returned with a non-zero exit code: #{code.exitstatus}"
    exit code.exitstatus
  end
end

program_tap = normalize_file(program, '.tap', false)
program_tzx = normalize_file(program, '.tzx', false)

unless (tapfile = [program_tap, program_tzx].compact.find{ |program| File.exist?(program) })
    $stderr.puts "ZXRUN: No such TAP/TZX file: #{program}"
    exit 1
end

require 'zxutils/emu'

ZXUtils::Emu.run tapfile, *emu_args
