#!/usr/bin/env ruby
# -*- coding: BINARY -*-
ZXINIT_VERSION = '0.3'
HELP = <<_EOH_
ZXINIT #{ZXINIT_VERSION}: Bootstrap Z80 programs and more.
Usage:
#{File.basename($0)} [options] target [class]

  target: the path to new program file to create
          (the .rb extension is optional)
  class: custom class name of the program, by default the class name
         is the capitalized target file name
  options:
    -p, --program: use the template for Z80 programs (default)
    -s, --song: use the template for music box songs instead
_EOH_

template = :program

args = []

while arg = ARGV.shift
  case arg
  when /^-s$/, /^--song$/
    template = :song
  when /^-p$/, /^--program$/
    template = :program
  when /^-/
    $stderr.puts "ZXINIT: unknown option: #{arg}"
    exit 2
  else
    if args.length == 2
      $stderr.puts "ZXINIT: too many arguments!"
      exit 3
    end
    args << arg
  end
end

target, klass_name = args

if target.nil?
  puts HELP; exit
end

def normalize_file(filepath, extension)
  dir, base = File.dirname(filepath), File.basename(filepath, extension)
  [File.join(dir, base + extension), base]
end

target, target_base = normalize_file(target, '.rb')

klass_name ||= target_base
klass_name = klass_name.split(/[_-]/).collect(&:capitalize).join

if File.exist?(target)
    $stderr.puts "ZXINIT: file already exists: #{target}"
    exit 1
end

puts "ZXINIT: initializing #{template} #{klass_name} at #{target}"

BOOTSTRAP = {}

BOOTSTRAP[:program]=<<_EOB_
# -*- coding: BINARY -*-
require 'z80'
# require 'z80/math_i'
# require 'z80/stdlib'
# require 'z80/utils/shuffle'
# require 'z80/utils/sincos'
# require 'z80/utils/sort'
# require 'z80/utils/vec_deque'
require 'zxlib/sys'
# require 'zxlib/ay_sound'
# require 'zxlib/gfx'
# require 'zxlib/gfx/bobs'
# require 'zxlib/gfx/clip'
# require 'zxlib/gfx/draw'
# require 'zxlib/math'
# module ZXLib
#   module Gfx
#     class Sprite8
#       DRAW_METHODS = [:xor, :or, :set, :mask_or]
#     end
#   end
# end
# require 'zxlib/gfx/sprite8'

class #{klass_name}
  include Z80
  include Z80::TAP
  # include ZXLib::AYSound::Registers
  # include ZXLib::AYSound::EnvelopeControl

  export start

  # macro_import MathInt
  # macro_import Stdlib
  # macro_import Utils::Shuffle
  # macro_import Utils::SinCos
  # macro_import Utils::Sort
  # macro_import Utils::VecDeque
  label_import ZXLib::Sys, macros: true
  # macro_import ZXLib::AYSound
  # macro_import ZXLib::Gfx
  # macro_import ZXLib::Gfx::Bobs
  # macro_import ZXLib::Gfx::Clip
  # macro_import ZXLib::Gfx::Draw
  # macro_import ZXLib::Gfx::Sprite8
  # import ZXLib::Math, :math, macros: true

  macro :print_text do |eoc, text|
                        ld   de, text_data
                        ld   bc, +text_data
                        call rom.pr_string
                        jr   eoc
    text_data           data text
  end

  ns :start do
                        ld   a, 2
                        call rom.chan_open
                        print_text "Hello world!\\r"
                        ret
  end
end


if __FILE__ == $0
  require 'zxlib/basic'

  class #{klass_name}Test
    include Z80
    include Z80::TAP

    with_saved :start_test, :exx, hl, ret: true do
                        call start
    end

    import              #{klass_name}
  end

  program_code = #{klass_name}Test.new 0x8000
  puts program_code.debug
  program = ZXLib::Basic.parse_source <<-EOB
  10 RANDOMIZE USR \#{program_code[:start_test]}
9998 STOP: GO TO 10
9999 CLEAR \#{program_code.org-1}: LOAD ""CODE : RUN
EOB
  program.save_tap(#{target_base.inspect}, line: 9999)
  program_code.save_tap(#{target_base.inspect}, append: true)
  Z80::TAP.parse_file(#{(target_base + '.tap').inspect}) { |hb| puts hb.to_s }
end
_EOB_

BOOTSTRAP[:song]=<<_EOB_
require 'zxutils/music_box'

class #{klass_name}
  include ZXUtils::MusicBox::Song

  tempo 128
  first_octave_note :c

  all_channels { noise_off; tone_off; volume 0 }

  ch_a do
    tone_on; set_instrument :instr1
    c  4, 8; c! 4, 8; d  4, 8; d! 4, 8; e  4, 8
  end

  all_channels do
    vibrato_off;
    mask_noise_off; mask_ay_volume_envelope_off; mask_tone_off
    volume_envelope_off; noise_envelope_off
    chord_off
    disable_ay_volume_ctrl
    noise_off; tone_off; volume 0;
  end

  envelope :decay1, [2, 0.5], :loop, [64, -1.0]

  instrument :instr1 do
    volume 12; ve :decay1
  end
end


if __FILE__ == $0
  require 'z80'
  song = #{klass_name}.new
  puts song.to_program.new(0x8000).debug
  puts "\\nRecursion depth max: \#{song.validate_recursion_depth!}"
  unless (unused_items = song.unused_item_names).all?{|_,n| n.empty?}
    puts "Unused:"
    unused_items.each do |category, names|
      unless names.empty?
        puts "  \#{category}:"
        puts names.map {|name| "   - :\#{name}" }
      end
    end
  end
  puts "Summary:"
  song.to_module.index_items.sort_by(&:type).chunk(&:type).each do |type, items|
    puts " - \#{type}s".to_s.ljust(15) + ": \#{items.length.to_s.rjust(3)}"
  end
  puts song.channel_tracks.zip(%w[A B C]).map {|t, ch| "channel \#{ch} ticks: \#{t.ticks_counter}" }
  song.to_player_module.save_tap #{target_base.inspect}
  Z80::TAP.parse_file(#{(target_base + '.tap').inspect}) { |hb| puts hb.to_s }
end
_EOB_

File.open(target, File::CREAT|File::EXCL|File::WRONLY|File::TRUNC, encoding: 'BINARY') do |fd|
  fd.write BOOTSTRAP[template]
end
puts "ZXINIT: ready"
puts "ZXINIT: compile and run #{klass_name} with:"
puts
puts "  zxrun #{target.inspect} #{(target_base + '.tap').inspect}"
