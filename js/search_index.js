var search_data = {"index":{"searchIndex":["basic","line","program","tokenizer","patterns","variable","variableparseerror","variabletypes","vars","float","multitasking","macros","taskinfo","taskvars","object","symbol","testsincos","z80","alloc","compileerror","helpers","label","program","condition","macros","mnemonics","register","syntax","tap","headerbody","tapeerror","tzx","z80lib","macros","z80mathint","integers","int32","macros","z80shuffle","macros","z80sincos","macros","sincos","sincos","sincostable","sincostable","zx7","macros","zxgfx","macros","zxgfxsprite8","macros","zxmath","zxreal","zxsys","coords","cursor","macros","strms","vars","**()","**()","+()","+()","+()","+@()","+@()","-()","-()","-()","-@()","-@()","<<()","<<()","<<()","==()",">>()",">>()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","add24_16()","add_code()","add_reloc()","adda_to()","addr()","address?()","array?()","array?()","bcdtoa()","bit8?()","byte()","bytes()","bytesize()","byteslice()","chan_exists()","char_array?()","clear!()","clrmem()","clrmem8()","clrmem_quick()","code()","code()","code?()","compress()","cpl()","create_chan_and_open()","create_sincos_from_sintable()","cursor_key_pressed?()","data()","db()","debug()","deep_clone_with_relocation()","divmod16()","divmod32_16()","divmod32_8()","divmod8()","draw_sprite8()","dummy()","dummy?()","dummy?()","dup()","dw()","dzx7_agilercs()","dzx7_mega()","dzx7_smartrcs()","dzx7_standard()","dzx7_turbo()","each_var()","export()","find_def_fn_args()","find_record()","for_loop?()","from_data()","from_program_data()","from_tap_chunk()","get()","gfx_sprite8_calculate_coords()","h()","hb()","head()","immediate?()","immediate?()","immediate?()","import()","import_file()","initialize()","int()","isolate()","jr_ok?()","key_pressed?()","label()","label?()","label_defined?()","label_immediate?()","label_import()","ld16()","length()","limit()","line()","line_index()","list()","macro()","macro_import()","match16?()","members_of_struct()","memcpy()","memcpy_quick()","method_missing()","method_missing()","method_missing()","mul16_32()","mul8()","mul8_24()","mul8_c()","mul_const8_24()","name=()","name=()","names()","names()","neg()","neg16()","neg_sintable256_pi_half_no_zero_lo()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_char_array()","new_code()","new_for_loop()","new_kernel()","new_number()","new_number_array()","new_program()","new_string()","new_var_array()","next_token()","nextline()","nextrow()","ns()","number?()","number_array?()","one_of?()","one_of?()","org()","pack_number()","parse_each()","parse_file()","parse_file()","parse_source()","parse_source_line()","parse_tap()","parse_tap()","pc()","peek_token()","pointer?()","pointer?()","pointer?()","pointer?()","prevline()","program?()","program_text_to_string()","rctoattr()","rctoscr()","read_arg_string()","read_chunk()","read_chunk()","read_data()","read_data()","read_integer_value()","read_positive_int_value()","read_source()","read_tap()","register?()","reinitialize()","reinitialize()","report_error()","report_error_unless()","respond_to_missing?()","respond_to_missing?()","restore_rom_interrupt_handler()","rnd()","save_tap()","save_tap()","save_tap()","screen?()","scrtoattr()","setup_custom_interrupt_handler()","shuffle_bytes_source_max256()","sincos_from_angle()","sincos_table_descriptors()","size()","split()","statement()","step()","string?()","string_to_program_text()","sub_from()","task_id()","task_stack_free_bytes()","terminated?()","text()","to_a()","to_alloc()","to_alloc()","to_data()","to_debug()","to_i()","to_i()","to_i()","to_i()","to_i()","to_label()","to_label()","to_label()","to_name()","to_name()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_source()","to_str()","to_str()","to_tap()","to_tap()","to_tap()","to_tap_chunk()","to_tap_chunk()","to_tap_chunk()","to_tap_chunk()","to_z80bin()","union()","unknown()","unpack_number()","unwrap_pointer()","utobcd()","utobcd_step()","value()","with_saved()","word()","words()","xy_to_pixel_addr()","xytoscr()","ytoscr()","|()","readme"],"longSearchIndex":["basic","basic::line","basic::program","basic::tokenizer","basic::tokenizer::patterns","basic::variable","basic::variableparseerror","basic::variabletypes","basic::vars","float","multitasking","multitasking::macros","multitasking::taskinfo","multitasking::taskvars","object","symbol","testsincos","z80","z80::alloc","z80::compileerror","z80::helpers","z80::label","z80::program","z80::program::condition","z80::program::macros","z80::program::mnemonics","z80::program::register","z80::syntax","z80::tap","z80::tap::headerbody","z80::tap::tapeerror","z80::tzx","z80lib","z80lib::macros","z80mathint","z80mathint::integers","z80mathint::integers::int32","z80mathint::macros","z80shuffle","z80shuffle::macros","z80sincos","z80sincos::macros","z80sincos::sincos","z80sincos::sincos","z80sincos::sincostable","z80sincos::sincostable","zx7","zx7::macros","zxgfx","zxgfx::macros","zxgfxsprite8","zxgfxsprite8::macros","zxmath","zxmath::zxreal","zxsys","zxsys::coords","zxsys::cursor","zxsys::macros","zxsys::strms","zxsys::vars","z80::alloc#**()","z80::label#**()","z80::alloc#+()","z80::label#+()","z80::program::register#+()","z80::alloc#+@()","z80::label#+@()","z80::alloc#-()","z80::label#-()","z80::program::register#-()","z80::alloc#-@()","z80::label#-@()","basic::vars#<<()","z80::alloc#<<()","z80::label#<<()","z80::alloc#==()","z80::alloc#>>()","z80::label#>>()","basic::program#[]()","basic::variable#[]()","basic::vars#[]()","z80#[]()","z80::alloc#[]()","z80::label#[]()","z80::program#[]()","z80::program::condition::[]()","z80::program::register#[]()","z80::program::register::[]()","z80mathint::macros#add24_16()","z80::add_code()","z80::add_reloc()","z80mathint::macros#adda_to()","z80::program#addr()","z80::program#address?()","basic::variable#array?()","z80::tap::headerbody#array?()","z80mathint::macros#bcdtoa()","z80::program::register#bit8?()","z80::label::byte()","z80::program#bytes()","basic::variable#bytesize()","basic::variable#byteslice()","zxsys::macros#chan_exists()","basic::variable#char_array?()","basic::vars#clear!()","z80lib::macros#clrmem()","z80lib::macros#clrmem8()","z80lib::macros#clrmem_quick()","basic::program#code()","basic::variable#code()","z80::tap::headerbody#code?()","zx7::compress()","z80::helpers#cpl()","zxsys::macros#create_chan_and_open()","z80sincos::macros#create_sincos_from_sintable()","zxsys::macros#cursor_key_pressed?()","z80::program#data()","z80::program#db()","z80#debug()","z80::alloc#deep_clone_with_relocation()","z80mathint::macros#divmod16()","z80mathint::macros#divmod32_16()","z80mathint::macros#divmod32_8()","z80mathint::macros#divmod8()","zxgfxsprite8#draw_sprite8()","z80::label::dummy()","z80::alloc#dummy?()","z80::label#dummy?()","z80::alloc#dup()","z80::program#dw()","zx7::macros#dzx7_agilercs()","zx7::macros#dzx7_mega()","zx7::macros#dzx7_smartrcs()","zx7::macros#dzx7_standard()","zx7::macros#dzx7_turbo()","basic::vars#each_var()","z80::program#export()","zxsys::macros#find_def_fn_args()","zxsys::macros#find_record()","basic::variable#for_loop?()","basic::variable::from_data()","basic::from_program_data()","basic::from_tap_chunk()","basic::vars#get()","zxgfxsprite8::macros#gfx_sprite8_calculate_coords()","z80::helpers#h()","z80::helpers#hb()","basic::variable#head()","z80::alloc#immediate?()","z80::label#immediate?()","z80::program#immediate?()","z80::program#import()","z80::program#import_file()","z80::label#initialize()","z80mathint::macros#int()","z80::program#isolate()","z80::program::condition#jr_ok?()","zxsys::macros#key_pressed?()","z80::program#label()","z80::program#label?()","z80::program#label_defined?()","z80::program#label_immediate?()","z80::program#label_import()","z80::program::macros#ld16()","basic::variable#length()","basic::variable#limit()","basic::variable#line()","basic::program#line_index()","basic::program#list()","z80::program::macros#macro()","z80::program#macro_import()","z80::program::register#match16?()","z80::label::members_of_struct()","z80lib::macros#memcpy()","z80lib::macros#memcpy_quick()","z80::alloc#method_missing()","z80::label#method_missing()","z80::program#method_missing()","z80mathint::macros#mul16_32()","z80mathint::macros#mul8()","z80mathint::macros#mul8_24()","z80mathint::macros#mul8_c()","z80mathint::macros#mul_const8_24()","z80::alloc#name=()","z80::label#name=()","z80::program::condition::names()","z80::program::register::names()","z80::helpers#neg()","z80mathint::macros#neg16()","z80sincos::macros#neg_sintable256_pi_half_no_zero_lo()","basic::line::new()","basic::program::new()","basic::tokenizer::new()","basic::variable::new()","basic::variableparseerror::new()","basic::vars::new()","z80::alloc::new()","z80::label::new()","z80::program#new()","z80::program::condition::new()","z80::program::register::new()","z80::tap::headerbody::new()","basic::variable::new_char_array()","z80::tap::headerbody::new_code()","basic::variable::new_for_loop()","multitasking::new_kernel()","basic::variable::new_number()","basic::variable::new_number_array()","z80::tap::headerbody::new_program()","basic::variable::new_string()","z80::tap::headerbody::new_var_array()","basic::tokenizer#next_token()","zxgfx::macros#nextline()","zxgfx::macros#nextrow()","z80::program#ns()","basic::variable#number?()","basic::variable#number_array?()","z80::program::condition#one_of?()","z80::program::register#one_of?()","z80::program#org()","zxmath::pack_number()","basic::tokenizer#parse_each()","z80::tap::parse_file()","z80::tap::parse_file()","basic::parse_source()","basic::line::parse_source_line()","z80::tap::parse_tap()","z80::tap::parse_tap()","z80::program#pc()","basic::tokenizer#peek_token()","z80::alloc#pointer?()","z80::label#pointer?()","z80::program#pointer?()","z80::program::register#pointer?()","zxgfx::macros#prevline()","z80::tap::headerbody#program?()","basic::vars::program_text_to_string()","zxgfx::macros#rctoattr()","zxgfx::macros#rctoscr()","zxsys::macros#read_arg_string()","z80::tap::read_chunk()","z80::tap::read_chunk()","z80::tap::read_data()","z80::tap::read_data()","zxsys::macros#read_integer_value()","zxsys::macros#read_positive_int_value()","basic::read_source()","basic::read_tap()","z80::program#register?()","z80::alloc#reinitialize()","z80::label#reinitialize()","zxsys::macros#report_error()","zxsys::macros#report_error_unless()","z80::alloc#respond_to_missing?()","z80::label#respond_to_missing?()","zxsys::macros#restore_rom_interrupt_handler()","z80mathint::macros#rnd()","z80::tap#save_tap()","z80::tap#save_tap()","z80::tap::headerbody#save_tap()","z80::tap::headerbody#screen?()","zxgfx::macros#scrtoattr()","zxsys::macros#setup_custom_interrupt_handler()","z80shuffle::macros#shuffle_bytes_source_max256()","z80sincos::macros#sincos_from_angle()","z80sincos::macros#sincos_table_descriptors()","z80::program::register#size()","z80::program::register#split()","basic::variable#statement()","basic::variable#step()","basic::variable#string?()","basic::vars::string_to_program_text()","z80mathint::macros#sub_from()","multitasking::macros#task_id()","multitasking::macros#task_stack_free_bytes()","basic::tokenizer#terminated?()","basic::line#text()","basic::vars#to_a()","z80::alloc#to_alloc()","z80::label#to_alloc()","z80::label::to_data()","z80::program::register#to_debug()","z80::alloc#to_i()","z80::label::to_i()","z80::label#to_i()","z80::program::condition#to_i()","z80::program::register#to_i()","symbol#to_label()","z80::alloc#to_label()","z80::label#to_label()","z80::alloc#to_name()","z80::label#to_name()","basic::line#to_s()","basic::program#to_s()","basic::variable#to_s()","basic::vars#to_s()","z80::alloc#to_s()","z80::label#to_s()","z80::tap::headerbody#to_s()","basic::program#to_source()","z80::alloc#to_str()","z80::label#to_str()","z80::tap#to_tap()","z80::tap#to_tap()","z80::tap::headerbody#to_tap()","basic::program#to_tap_chunk()","basic::variable#to_tap_chunk()","z80::tap#to_tap_chunk()","z80::tap#to_tap_chunk()","float#to_z80bin()","z80::program#union()","zxmath#unknown()","zxmath::unpack_number()","z80::program#unwrap_pointer()","z80mathint::macros#utobcd()","z80mathint::macros#utobcd_step()","basic::variable#value()","z80::program::macros#with_saved()","z80::label::word()","z80::program#words()","zxgfx::macros#xy_to_pixel_addr()","zxgfx::macros#xytoscr()","zxgfx::macros#ytoscr()","z80::program::register#|()",""],"info":[["Basic","","Basic.html","","<p>A module with ZX Spectrum&#39;s BASIC program utilites.\n<p>See: Basic::Program, Basic::Vars, Basic::Variable …\n"],["Basic::Line","","Basic/Line.html","","<p>Represents a ZX Basic program line.\n<p>The original program line without line number, its length and a terminating …\n"],["Basic::Program","","Basic/Program.html","","<p>Represents a ZX Basic program in a semi-parsed form.\n"],["Basic::Tokenizer","","Basic/Tokenizer.html","","<p>A Basic program tokenizer.\n"],["Basic::Tokenizer::Patterns","","Basic/Tokenizer/Patterns.html","",""],["Basic::Variable","","Basic/Variable.html","","<p>Represents a ZX Spectrum&#39;s Basic variable with various methods to inspect its content.\n"],["Basic::VariableParseError","","Basic/VariableParseError.html","",""],["Basic::VariableTypes","","Basic/VariableTypes.html","",""],["Basic::Vars","","Basic/Vars.html","","<p>A container class for keeping and inspecting ZX Basic program variables.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;date&#39;</span>\n<span class=\"ruby-identifier\">require</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Float","","Float.html","",""],["Multitasking","","Multitasking.html","","<p>Multitasking\n<p>Run machine code programs (a.k.a. “tasks”) in parallel with ZX Basic.\n<p>This class …\n"],["Multitasking::Macros","","Multitasking/Macros.html","","<p>Multitasking Macros for tasks.\n"],["Multitasking::TaskInfo","","Multitasking/TaskInfo.html","","<p>Task info struct. Each running task has one.\n"],["Multitasking::TaskVars","","Multitasking/TaskVars.html","","<p>Struct definition for mtvars.\n"],["Object","","Object.html","",""],["Symbol","","Symbol.html","",""],["TestSinCos","","TestSinCos.html","",""],["Z80","","Z80.html","","<p>Include this module in your <strong>program</strong> class to turn it to a powerfull Z80 macro assembler.\n<p><strong>To fully use</strong> …\n"],["Z80::Alloc","","Z80/Alloc.html","","<p>Alloc class is used internally by relocation mechanizm. See Label instead.\n"],["Z80::CompileError","","Z80/CompileError.html","","<p>Error raised during program compilation (while creating instance).\n"],["Z80::Helpers","","Z80/Helpers.html","","<p>some useless stuff; needed for z80 opcode testing; but didn&#39;t delete it (maybe will come in handy) …\n"],["Z80::Label","","Z80/Label.html","","<p>Z80 Label\n<p>A Label class is the CORE of relocation mechanizm:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">mylabel</span> <span class=\"ruby-identifier\">inc</span> [<span class=\"ruby-identifier\">hl</span>]\n        <span class=\"ruby-identifier\">inc</span> <span class=\"ruby-identifier\">hl</span>\n        <span class=\"ruby-identifier\">djnz</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Z80::Program","","Z80/Program.html","",""],["Z80::Program::Condition","","Z80/Program/Condition.html","","<p>Creates <code>jr/jp/ret/call</code> conditions as constants:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">NZ</span> <span class=\"ruby-constant\">Z</span> <span class=\"ruby-constant\">NC</span> <span class=\"ruby-constant\">C</span> <span class=\"ruby-constant\">PO</span> <span class=\"ruby-constant\">PE</span> <span class=\"ruby-constant\">P</span> <span class=\"ruby-constant\">M</span>\n</pre>\n<p>You must not use this class directly. …\n"],["Z80::Program::Macros","","Z80/Program/Macros.html","","<p>Z80 Macros\n<p>Commonly used macros.\n"],["Z80::Program::Mnemonics","","Z80/Program/Mnemonics.html","","<p>Z80 Mnemonics\n<p>All Z80 instructions are created as singleton methods. They produce machine code which is …\n"],["Z80::Program::Register","","Z80/Program/Register.html","","<p>Z80 registers are populated as singleton methods. You must not create instances of this class directly. …\n"],["Z80::Syntax","","Z80/Syntax.html","","<p>Error raised during program parsing.\n"],["Z80::TAP","","Z80/TAP.html","","<p>Adds the TAP format support to your <strong>program</strong>.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">puts</span> <span class=\"ruby-constant\">Z80</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">TAP</span>.<span class=\"ruby-identifier\">parse_file</span>(<span class=\"ruby-string\">&quot;examples/calculator.tap&quot;</span>).<span class=\"ruby-identifier\">to_a</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Z80::TAP::HeaderBody","","Z80/TAP/HeaderBody.html","","<p>A class that represents the optional header and the single body chunk of a TAP file.\n<p>Instances of this …\n"],["Z80::TAP::TapeError","","Z80/TAP/TapeError.html","",""],["Z80::TZX","","Z80/TZX.html","","<p>Adds the TAP format support to your <strong>program</strong>.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">puts</span> <span class=\"ruby-constant\">Z80</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">TAP</span>.<span class=\"ruby-identifier\">parse_file</span>(<span class=\"ruby-string\">&quot;examples/calculator.tap&quot;</span>).<span class=\"ruby-identifier\">to_a</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Z80Lib","","Z80Lib.html","",""],["Z80Lib::Macros","","Z80Lib/Macros.html","",""],["Z80MathInt","","Z80MathInt.html","","<p>Z80MathInt - integer math common routines.\n<p>in Z80MathInt::Macros\n<p>Example:\n"],["Z80MathInt::Integers","","Z80MathInt/Integers.html","",""],["Z80MathInt::Integers::Int32","","Z80MathInt/Integers/Int32.html","",""],["Z80MathInt::Macros","","Z80MathInt/Macros.html","","<p>Z80MathInt Macros\n"],["Z80Shuffle","","Z80Shuffle.html","",""],["Z80Shuffle::Macros","","Z80Shuffle/Macros.html","",""],["Z80SinCos","","Z80SinCos.html","","<p>Z80SinCos - integer sinus-cosinus table routines.\n<p>in Z80SinCos::Macros\n<p>Structs\n"],["Z80SinCos::Macros","","Z80SinCos/Macros.html","","<p>Z80SinCos Macros\n"],["Z80SinCos::SinCos","","Z80SinCos/SinCos.html","","<p>A Z80SinCos table entry struct.\n<p>Consists of two <code>words</code>:\n<p><code>sin</code>\n"],["Z80SinCos::SinCos","","Z80SinCos/SinCos.html","","<p>A Z80SinCos table entry struct.\n<p>Consists of two <code>words</code>:\n<p><code>sin</code>\n"],["Z80SinCos::SinCosTable","","Z80SinCos/SinCosTable.html","","<p>Z80SinCos table struct.\n<p>The angle [0,256) being used in this table translates to radians in the following …\n"],["Z80SinCos::SinCosTable","","Z80SinCos/SinCosTable.html","","<p>Z80SinCos table struct.\n<p>The angle [0,256) being used in this table translates to radians in the following …\n"],["ZX7","","ZX7.html","","<p>ZX7 decoding routines.\n<p>in ZX7::Macros\n<p>Example:\n"],["ZX7::Macros","","ZX7/Macros.html","",""],["ZXGfx","","ZXGfx.html","","<p>A module with Z80 Macros for common ZX Spectrum graphics tasks\n<p>Example:\n\n<pre>require &#39;zxlib/gfx&#39;\n\nclass Program ...</pre>\n"],["ZXGfx::Macros","","ZXGfx/Macros.html","",""],["ZXGfxSprite8","","ZXGfxSprite8.html","","<p>Sprite drawing routines.\n<p>See also ZXGfxSprite8::Macros.\n<p>By default all drawing method routines are produced. …\n"],["ZXGfxSprite8::Macros","","ZXGfxSprite8/Macros.html","","<p>ZXGfxSprite8 Macros.\n"],["ZXMath","","ZXMath.html","","<p>A module with the ZXReal struct definition and ZX-Spectrum FP helpers.\n<p>Example:\n\n<pre>require(&#39;zxlib/math&#39;)\n ...</pre>\n"],["ZXMath::ZXReal","","ZXMath/ZXReal.html","","<p>A struct representing a ZX-Spectrum&#39;s FP calculator&#39;s real number data type.\n<p>See:\n<p>www.worldofspectrum.org/ZXBasicManual/zxmanchap24.html …\n"],["ZXSys","","ZXSys.html","","<p>A module with Z80 macros for common ZX Spectrum system tasks.\n<p>Contains:\n<p>labels for some of ZX Spectrum …\n"],["ZXSys::Coords","","ZXSys/Coords.html","","<p>A struct for ZX Spectrum <code>coords</code> variable.\n"],["ZXSys::Cursor","","ZXSys/Cursor.html","","<p>A struct for various ZX Spectrum variables.\n"],["ZXSys::Macros","","ZXSys/Macros.html","",""],["ZXSys::Strms","","ZXSys/Strms.html","","<p>A struct for ZX Spectrum <code>strms</code> variable.\n"],["ZXSys::Vars","","ZXSys/Vars.html","","<p>ZX Spectrum Basic and System variables.\n"],["**","Z80::Alloc","Z80/Alloc.html#method-i-2A-2A","(m)",""],["**","Z80::Label","Z80/Label.html#method-i-2A-2A","(m)","<p>Returns a member <code>m</code> as a separate label.\n"],["+","Z80::Alloc","Z80/Alloc.html#method-i-2B","(other)",""],["+","Z80::Label","Z80/Label.html#method-i-2B","(offset)","<p>Returns label indexed by <code>index</code> but not as a pointer. Returns label offset by <code>offset</code>. It can be an integer …\n"],["+","Z80::Program::Register","Z80/Program/Register.html#method-i-2B","(other)","<p>This method makes possible to write indexed expressions with <code>ix/iy</code> registers. Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ld</span> <span class=\"ruby-identifier\">a</span>, [<span class=\"ruby-identifier\">ix</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">7</span>]\n</pre>\n"],["+@","Z80::Alloc","Z80/Alloc.html#method-i-2B-40","()",""],["+@","Z80::Label","Z80/Label.html#method-i-2B-40","()","<p>Returns size (type size) of a label.\n"],["-","Z80::Alloc","Z80/Alloc.html#method-i-2D","(other)",""],["-","Z80::Label","Z80/Label.html#method-i-2D","(offset)","<p>Returns label offset by negative <code>offset</code>. It can be an integer or another label.\n"],["-","Z80::Program::Register","Z80/Program/Register.html#method-i-2D","(other)","<p>This method makes possible to write indexed expressions with <code>ix/iy</code> registers. Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ld</span> <span class=\"ruby-identifier\">a</span>, [<span class=\"ruby-identifier\">ix</span> <span class=\"ruby-operator\">-</span> <span class=\"ruby-value\">7</span>]\n</pre>\n"],["-@","Z80::Alloc","Z80/Alloc.html#method-i-2D-40","()",""],["-@","Z80::Label","Z80/Label.html#method-i-2D-40","()","<p>Returns negated label.\n"],["<<","Basic::Vars","Basic/Vars.html#method-i-3C-3C","(var)","<p>Adds a Basic::Variable to self.\n"],["<<","Z80::Alloc","Z80/Alloc.html#method-i-3C-3C","(m)",""],["<<","Z80::Label","Z80/Label.html#method-i-3C-3C","(m)","<p>Shifts left label binary value when resolved.\n"],["==","Z80::Alloc","Z80/Alloc.html#method-i-3D-3D","(other)",""],[">>","Z80::Alloc","Z80/Alloc.html#method-i-3E-3E","(m)",""],[">>","Z80::Label","Z80/Label.html#method-i-3E-3E","(m)","<p>Shifts right label binary value when resolved.\n"],["[]","Basic::Program","Basic/Program.html#method-i-5B-5D","(index)","<p>Returns a Basic::Line at <code>index</code> or an array of lines if <code>Range</code> is given.\n"],["[]","Basic::Variable","Basic/Variable.html#method-i-5B-5D","(*at)","<p>Returns a selected portion of an array variable according to the provided dimension indices.\n<p>The indices …\n"],["[]","Basic::Vars","Basic/Vars.html#method-i-5B-5D","(index)","<p>Returns a Basic::Variable at <code>index</code> or an array of variables if <code>Range</code> is given.\n"],["[]","Z80","Z80.html#method-i-5B-5D","(label)","<p>Returns the relocated label value.\n"],["[]","Z80::Alloc","Z80/Alloc.html#method-i-5B-5D","(index = nil)",""],["[]","Z80::Label","Z80/Label.html#method-i-5B-5D","(index = nil)","<p>Returns a label offset by <code>index</code> multiplied by label type size. If <code>index</code> is nil, returns a pointer instead. …\n"],["[]","Z80::Program","Z80/Program.html#method-i-5B-5D","(label)","<p>Method used internally by mnemonics to make a pointer of a label or a Register.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ld</span>  <span class=\"ruby-identifier\">hl</span>, [<span class=\"ruby-identifier\">foo</span>] <span class=\"ruby-operator\">...</span>\n</pre>\n"],["[]","Z80::Program::Condition","Z80/Program/Condition.html#method-c-5B-5D","(index)",""],["[]","Z80::Program::Register","Z80/Program/Register.html#method-i-5B-5D","(index = 0)","<p>Method used internally by mnemonics to make pointer of a label or register. Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">ld</span>  <span class=\"ruby-identifier\">b</span>, [<span class=\"ruby-identifier\">ix</span> <span class=\"ruby-operator\">+</span> <span class=\"ruby-value\">2</span>]\n<span class=\"ruby-identifier\">ld</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["[]","Z80::Program::Register","Z80/Program/Register.html#method-c-5B-5D","(index)",""],["add24_16","Z80MathInt::Macros","Z80MathInt/Macros.html#method-i-add24_16","(th8=c, tl16=hl, tt=de, signed:true)","<p>Adds 16bit <code>tt</code> to 24bit <code>th8</code>|<code>tl16</code>, result in <code>a</code>|<code>tl16</code>.\n<p>Modifies: <code>af</code>, <code>tl16</code>.\n<p>T-states: 27 signed / 19 unsigned …\n"],["add_code","Z80","Z80.html#method-c-add_code","(prg, data, type = 1, mnemo = nil, *mpar)","<p>Method used by Program instructions was placed here to not pollute <strong>program</strong> namespace\n"],["add_reloc","Z80","Z80.html#method-c-add_reloc","(prg, label, size, offset = 0, from = nil)","<p>Method used by Program instructions was placed here to not pollute <strong>program</strong> namespace\n"],["adda_to","Z80MathInt::Macros","Z80MathInt/Macros.html#method-i-adda_to","(h, l)","<p>Adds <code>a</code> to <code>h</code>|<code>l</code>.\n<p>Uses: <code>af</code>, <code>h</code>, <code>l</code>.\n<p>Note:\n"],["addr","Z80::Program","Z80/Program.html#method-i-addr","(address, type = 1)","<p>Creates an immediate label at an absolute <code>address</code> of (optional) <code>type</code>\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">foo</span> <span class=\"ruby-identifier\">addr</span> <span class=\"ruby-value\">0xffff</span>\n<span class=\"ruby-identifier\">bar</span> <span class=\"ruby-identifier\">addr</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["address?","Z80::Program","Z80/Program.html#method-i-address-3F","(arg)","<p>Convenient method for macros to check if argument is non-register value or a pointer.\n<p>Returns <code>true</code> for: …\n"],["array?","Basic::Variable","Basic/Variable.html#method-i-array-3F","()","<p><code>true</code> if variable is a number or character array\n"],["array?","Z80::TAP::HeaderBody","Z80/TAP/HeaderBody.html#method-i-array-3F","()","<p><code>true</code> if this chunk represents a number or character array\n"],["bcdtoa","Z80MathInt::Macros","Z80MathInt/Macros.html#method-i-bcdtoa","(buffer, size, &block)","<p>Reads each bcd digit as <code>a</code> destroying content of a buffer in the process.\n<p>Uses: <code>a</code>, <code>hl</code>, <code>b</code>.\n<p>On first digit …\n"],["bit8?","Z80::Program::Register","Z80/Program/Register.html#method-i-bit8-3F","()",""],["byte","Z80::Label","Z80/Label.html#method-c-byte","(size = 1)","<p>Struct definition type.\n"],["bytes","Z80::Program","Z80/Program.html#method-i-bytes","(*args)","<p>Creates a label and allocate bytes with Program.data.\n<p>Sugar for:\n\n<pre>data 1, ...</pre>\n"],["bytesize","Basic::Variable","Basic/Variable.html#method-i-bytesize","()","<p>Returns original size of this variable in bytes.\n"],["byteslice","Basic::Variable","Basic/Variable.html#method-i-byteslice","(*at)","<p>Returns a selected portion of an array variable according to provided dimension indices as raw bytes. …\n"],["chan_exists","ZXSys::Macros","ZXSys/Macros.html#method-i-chan_exists","(name = nil, output: de, input: nil, chan_name: 'U', buffer: 23296)","<p>Looks for a ZX Spectrum CHAN entry determined by <code>output</code>, <code>input</code> and a <code>chan_name</code>.\n<p><p>output &mdash; output routine …\n\n"],["char_array?","Basic::Variable","Basic/Variable.html#method-i-char_array-3F","()","<p><code>true</code> if variable is a character array\n"],["clear!","Basic::Vars","Basic/Vars.html#method-i-clear-21","()","<p>Clear all variables\n"],["clrmem","Z80Lib::Macros","Z80Lib/Macros.html#method-i-clrmem","(dest, size, value = 0)","<p>Clears memory at <code>dest</code>\n<p>Modifies: <code>bc</code>, <code>de</code>, <code>hl</code>\n<p><code>dest</code> &mdash; destination address or <code>hl</code>\n"],["clrmem8","Z80Lib::Macros","Z80Lib/Macros.html#method-i-clrmem8","(dest, size=b, value = 0, rr = hl)","<p>Clears max 256 bytes of memory at dest  Slower (does not use ld?r) but involves less registers.\n<p>Modifies: …\n"],["clrmem_quick","Z80Lib::Macros","Z80Lib/Macros.html#method-i-clrmem_quick","(dest, size, value = 0)","<p>Clears memory at <code>dest</code> in a fast way using unrolled <code>ldi</code>\n<p>Modifies: <code>bc</code>, <code>de</code>, <code>hl</code>\n<p><code>dest</code> &mdash; destination address or …\n"],["code","Basic::Program","Basic/Program.html#method-i-code","()","<p>Returns the raw byte representation of the whole ZX Basic program as a binary string.\n"],["code","Basic::Variable","Basic/Variable.html#method-i-code","()","<p>Returns a portion of data after the header.\n"],["code?","Z80::TAP::HeaderBody","Z80/TAP/HeaderBody.html#method-i-code-3F","()","<p><code>true</code> if this chunk represents a code\n"],["compress","ZX7","ZX7.html#method-c-compress","(data)","<p>ZX7.compress(data) -&gt; data (zx7 compressed)\n"],["cpl","Z80::Helpers","Z80/Helpers.html#method-i-cpl","(a)",""],["create_chan_and_open","ZXSys::Macros","ZXSys/Macros.html#method-i-create_chan_and_open","(name = nil, output:, input: nil, strm_no: 4, chan_name: 'U')","<p>Creates ZX Spectrum CHAN entry and opens it as stream #N.\n<p><p>output &mdash; output routine address or a 16bit register …\n\n"],["create_sincos_from_sintable","Z80SinCos::Macros","Z80SinCos/Macros.html#method-i-create_sincos_from_sintable","(sincos, sintable:hl)","<p>Code that creates a full SinCosTable from a quarter sinus table generated by #neg_sintable256_pi_half_no_zero_lo …\n"],["cursor_key_pressed?","ZXSys::Macros","ZXSys/Macros.html#method-i-cursor_key_pressed-3F","(t:b)","<p>Test for cursor keys being pressed.\n<p><code>t</code> &mdash; a temporary register.\n\n<p>Modifies: <code>af</code>, <code>t</code>.\n"],["data","Z80::Program","Z80/Program.html#method-i-data","(type = 1, size = nil, *args)","<p>Creates relocatable label and adds data to Program.code at Program.pc. The data size will be of <code>type.to_i</code> …\n"],["db","Z80::Program","Z80/Program.html#method-i-db","(*args)","<p>Creates a label and allocate bytes with Program.data.\n<p>Sugar for:\n\n<pre>data 1, [...]</pre>\n"],["debug","Z80","Z80.html#method-i-debug","()","<p>Creates debugger view from instance of a program. Returns an Array of Strings.\n<p>Example debugger output: …\n"],["deep_clone_with_relocation","Z80::Alloc","Z80/Alloc.html#method-i-deep_clone_with_relocation","(addr)","<p>This method is being used when importing labels from other programs.\n"],["divmod16","Z80MathInt::Macros","Z80MathInt/Macros.html#method-i-divmod16","(x=ixl, check0:true, check1:true, modulo:false, quick8:true)","<p>Performs euclidean divison. Divides <code>hl</code> by <code>de</code>. Returns quotient in <code>hl</code> and remainder in <code>bc</code>. <code>de</code> remains …\n"],["divmod32_16","Z80MathInt::Macros","Z80MathInt/Macros.html#method-i-divmod32_16","(x:ixl, check0:true, check1:true, modulo:false, quick8:true)","<p>Performs euclidean divison. Divides <code>hl</code>|<code>hl&#39;</code> by <code>de</code>. Returns quotient in <code>hl</code>|<code>hl&#39;</code> and remainder in …\n"],["divmod32_8","Z80MathInt::Macros","Z80MathInt/Macros.html#method-i-divmod32_8","(m=c, check0:true, check1:true, modulo:false)","<p>Performs euclidean divison. Divides <code>hl</code>|<code>hl&#39;</code> by <code>m</code>. Returns quotient in <code>hl</code>|<code>hl&#39;</code> and remainder in …\n"],["divmod8","Z80MathInt::Macros","Z80MathInt/Macros.html#method-i-divmod8","(m=c, check0:true, check1:true, modulo:false)","<p>Performs euclidean divison. Divides <code>hl</code> by <code>m</code>. Returns quotient in <code>hl</code> and remainder in <code>a</code>. <code>m</code> remains unaltered. …\n"],["draw_sprite8","ZXGfxSprite8","ZXGfxSprite8.html#method-i-draw_sprite8","","<p>Draws a sprite using xor/or/clear/and+or with arbitrary height and width.\n<p>In <code>and+or</code> mode sprite bitmap …\n"],["dummy","Z80::Label","Z80/Label.html#method-c-dummy","(name = nil)","<p>Creates a dummy label. Do not use it directly. This is called when referenced label has not been yet …\n"],["dummy?","Z80::Alloc","Z80/Alloc.html#method-i-dummy-3F","()",""],["dummy?","Z80::Label","Z80/Label.html#method-i-dummy-3F","()","<p>Checks if a label is already defined or is in-the-future a.k.a. a <code>dummy</code> label. Do not use it directly. …\n"],["dup","Z80::Alloc","Z80/Alloc.html#method-i-dup","()",""],["dw","Z80::Program","Z80/Program.html#method-i-dw","(*args)","<p>Creates a label and allocate bytes with Program.data.\n<p>Sugar for:\n\n<pre>data 2, [...]</pre>\n"],["dzx7_agilercs","ZX7::Macros","ZX7/Macros.html#method-i-dzx7_agilercs","(name=nil)","<p>“Agile” integrated RCS+ZX7 decoder by Einar Saukas (150 bytes)\n<p>Parameters:\n\n<pre>HL: source address ...</pre>\n"],["dzx7_mega","ZX7::Macros","ZX7/Macros.html#method-i-dzx7_mega","(name=nil)","<p>ZX7 decoder by Einar Saukas “Mega” version (244 bytes, 30% faster)\n<p>Parameters:\n\n<pre>HL: source address ...</pre>\n"],["dzx7_smartrcs","ZX7::Macros","ZX7/Macros.html#method-i-dzx7_smartrcs","(name=nil)","<p>“Smart” integrated RCS+ZX7 decoder by Einar Saukas (110 bytes)\n<p>Parameters:\n\n<pre>HL: source address ...</pre>\n"],["dzx7_standard","ZX7::Macros","ZX7/Macros.html#method-i-dzx7_standard","(name = nil)","<p>ZX7 decoder by Einar Saukas, Antonio Villena &amp; Metalbrain “Standard” version (69 bytes …\n"],["dzx7_turbo","ZX7::Macros","ZX7/Macros.html#method-i-dzx7_turbo","(name = nil)","<p>ZX7 decoder by Einar Saukas &amp; Urusergi “Turbo” version (88 bytes, 25% faster)\n<p>Parameters: …\n"],["each_var","Basic::Vars","Basic/Vars.html#method-i-each_var","(&block)","<p>Returns an Enumerator of every Basic::Variable found in self.\n"],["export","Z80::Program","Z80/Program.html#method-i-export","(label)","<p>Exports <code>label</code>. This will allow other programs to Program.import it. All members of <code>label</code> will also be …\n"],["find_def_fn_args","ZXSys::Macros","ZXSys/Macros.html#method-i-find_def_fn_args","(argnum=b, subroutine:true, not_found:nil, cf_on_direct:false)","<p>Get a DEF FN argument value address.\n<p><p><code>argnum</code> &mdash; 1-based argument index (0 is 256), may be a register or a …\n\n"],["find_record","ZXSys::Macros","ZXSys/Macros.html#method-i-find_record","(th=h, tl=l)","<p>Search for a record that matches large block of a memory.\n<p><p>+th|tl&#39;+ &mdash; address of the last byte to search …\n\n"],["for_loop?","Basic::Variable","Basic/Variable.html#method-i-for_loop-3F","()","<p><code>true</code> if variable is a FOR loop variable\n"],["from_data","Basic::Variable","Basic/Variable.html#method-c-from_data","(data)","<p>Creates a Basic::Variable from a ZX Spectrum&#39;s VARS raw data.\n<p>Provide <code>data</code> as a binary string.\n"],["from_program_data","Basic","Basic.html#method-c-from_program_data","(data, prog_length=nil, start:nil)","<p>Creates a Basic::Program instance from a ZX Spectrum&#39;s raw binary data.\n<p>The binary data may be a snapshot …\n"],["from_tap_chunk","Basic","Basic.html#method-c-from_tap_chunk","(chunk)","<p>Creates a Basic::Program or a Basic::Variable depending on the type of the chunk. The chunk should be …\n"],["get","Basic::Vars","Basic/Vars.html#method-i-get","(name)","<p>Returns a first Basic::Variable if found by its name.\n"],["gfx_sprite8_calculate_coords","ZXGfxSprite8::Macros","ZXGfxSprite8/Macros.html#method-i-gfx_sprite8_calculate_coords","(outofscreen: :ret, **nsopts, &block)","<p>Calculates coordinates and prepares registers for <code>draw_sprite8</code>\n<p>Uses &mdash; <code>af</code>, <code>af&#39;</code>, <code>bc</code>, <code>de</code>, <code>hl</code>\n\n<p>Input:\n"],["h","Z80::Helpers","Z80/Helpers.html#method-i-h","(a)",""],["hb","Z80::Helpers","Z80/Helpers.html#method-i-hb","(a)",""],["head","Basic::Variable","Basic/Variable.html#method-i-head","()","<p>Returns a header byte.\n"],["immediate?","Z80::Alloc","Z80/Alloc.html#method-i-immediate-3F","()",""],["immediate?","Z80::Label","Z80/Label.html#method-i-immediate-3F","()","<p>Checks if label is absolute (<code>true</code>) or relocatable (<code>false</code>). Prefer using Program.immediate? instead.  …\n"],["immediate?","Z80::Program","Z80/Program.html#method-i-immediate-3F","(arg)","<p>Convenient method for macros to check if argument is an immediate label or a integer\n<p>Returns <code>true</code> for: …\n"],["import","Z80::Program","Z80/Program.html#method-i-import","(program, name=nil, **flags)","<p>Import code, labels and macros from another <code>program</code>. Give (optional) <code>name</code> for namespace. Without <code>name</code> …\n"],["import_file","Z80::Program","Z80/Program.html#method-i-import_file","(file, type = :any, size = nil, pipe:nil, check_size:nil, data_type:nil, **args)","<p>Import binary file.\n<p><code>file</code> is a filename.\n<p><code>type</code> specifies format of binary file (as Symbol), if <code>:any</code> -&gt; …\n"],["initialize","Z80::Label","Z80/Label.html#method-i-initialize","(address, type = 1, reloc = nil, members = nil)",""],["int","Z80MathInt::Macros","Z80MathInt/Macros.html#method-i-int","(bitsize, value)","<p>Packs an integer of arbitrary byte size, creates a label and adds it to Program.code at Program.pc.\n<p>Provided …\n"],["isolate","Z80::Program","Z80/Program.html#method-i-isolate","(name = nil, **opts, &block)","<p>Creates a isolated namespace for relocatable labels defined inside your code.\n<p>Isolated namespace can&#39;t …\n"],["jr_ok?","Z80::Program::Condition","Z80/Program/Condition.html#method-i-jr_ok-3F","()",""],["key_pressed?","ZXSys::Macros","ZXSys/Macros.html#method-i-key_pressed-3F","(line_mask=0, key_mask=0x1f)","<p>Test for a key or keys being pressed.\n<p><p>line_mask &mdash; Keyboard half-line mask, may be an 8 bit register. The …\n\n"],["label","Z80::Program","Z80/Program.html#method-i-label","(type = 1)","<p>Creates relocatable label at Program.pc of (optional) <code>type</code>.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">foo</span> <span class=\"ruby-identifier\">label</span>\n<span class=\"ruby-identifier\">bar</span> <span class=\"ruby-identifier\">label</span> <span class=\"ruby-value\">2</span>\n</pre>\n"],["label?","Z80::Program","Z80/Program.html#method-i-label-3F","(arg)","<p>Convenient method for macros to check if argument is label-like.\n<p>Returns <code>true</code> for:\n\n<pre>foo, :foo, [foo], [foo ...</pre>\n"],["label_defined?","Z80::Program","Z80/Program.html#method-i-label_defined-3F","(name)","<p>True if a label with a <code>name</code> is defined in the current context.\n"],["label_immediate?","Z80::Program","Z80/Program.html#method-i-label_immediate-3F","(arg)","<p>Convenient method for macros to check if argument is an immediate label.\n<p>Returns <code>true</code> for:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">foo</span> <span class=\"ruby-identifier\">addr</span> <span class=\"ruby-value\">0x1234</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["label_import","Z80::Program","Z80/Program.html#method-i-label_import","(program, name = nil)","<p>Import labels from another <code>program</code>.\n<p>A sugar for:\n\n<pre>import program, :code =&gt; false, :macros =&gt; false, :labels ...</pre>\n"],["ld16","Z80::Program::Macros","Z80/Program/Macros.html#method-i-ld16","(aa, bb)","<p>Loads a content of the register <code>bb</code> into register <code>aa</code>.\n<p>A sugar for two 8bit ld instructions.\n<p>Example:\n"],["length","Basic::Variable","Basic/Variable.html#method-i-length","()","<p>For strings returns the original string length, for arrays a number of dimensions.\n"],["limit","Basic::Variable","Basic/Variable.html#method-i-limit","()","<p>Returns the FOR loop limit value.\n"],["line","Basic::Variable","Basic/Variable.html#method-i-line","()","<p>Returns the FOR loop line number.\n"],["line_index","Basic::Program","Basic/Program.html#method-i-line_index","(line_no)","<p>Returns index in <code>lines</code> of a Basic line number equal or greater than <code>line_no</code>.\n"],["list","Basic::Program","Basic/Program.html#method-i-list","(line_no)","<p>Returns a new Basic::Program instance with the subset of its lines according to <code>line_no</code> argument.\n<p><code>line_no</code> …\n"],["macro","Z80::Program::Macros","Z80/Program/Macros.html#method-i-macro","(name, *registers, **nsopts, &mblock)","<p>Convenient method to create local macros.\n<p>Give a <code>name</code> (Symbol) to your macro, (optional) list of <code>registers</code> …\n"],["macro_import","Z80::Program","Z80/Program.html#method-i-macro_import","(program)","<p>Import macros from another <code>program</code>.\n<p>A sugar for:\n\n<pre>import program, :code =&gt; false, :macros =&gt; true, :labels ...</pre>\n"],["match16?","Z80::Program::Register","Z80/Program/Register.html#method-i-match16-3F","(other)","<p>Checks if <code>self</code> can adjoin with <code>other</code>: <code>self</code>|<code>other</code>\n"],["members_of_struct","Z80::Label","Z80/Label.html#method-c-members_of_struct","()",""],["memcpy","Z80Lib::Macros","Z80Lib/Macros.html#method-i-memcpy","(dest=de, source=hl, size=bc, reverse = false)","<p>Copies memory from <code>source</code> to <code>dest</code>\n<p>If <code>source</code> or <code>dest</code> and <code>size</code> are absolute detects memory overlaps.\n<p>Modifies: …\n"],["memcpy_quick","Z80Lib::Macros","Z80Lib/Macros.html#method-i-memcpy_quick","(dest=de, source=hl, size=1, reverse = false)","<p>Copies memory from <code>source</code> to <code>dest</code> in a fast way using unrolled <code>ldi</code>\n<p>If <code>source</code> or <code>dest</code> and <code>size</code> are static …\n"],["method_missing","Z80::Alloc","Z80/Alloc.html#method-i-method_missing","(m)",""],["method_missing","Z80::Label","Z80/Label.html#method-i-method_missing","(m)",""],["method_missing","Z80::Program","Z80/Program.html#method-i-method_missing","(m, label = nil)","<p>If no method <code>m</code> is defined assume it is a label. Label with no arguments is a label being referenced. …\n"],["mul16_32","Z80MathInt::Macros","Z80MathInt/Macros.html#method-i-mul16_32","(mm=bc, tt:bc)","<p>Performs multiplication of unsigned 16bit <code>hl</code> by 16bit <code>mm</code> (<code>bc</code> or <code>de</code>) and returns result in 32 bit <code>hl</code>| …\n"],["mul8","Z80MathInt::Macros","Z80MathInt/Macros.html#method-i-mul8","(mh=h, ml=l, m=a, tt:de, clrhl:true, double:false)","<p>Performs multiplication of unsigned 16bit <code>mh</code>|<code>ml</code> * 8bit <code>m</code> and returns result in <code>hl</code>. Optionally accumulates …\n"],["mul8_24","Z80MathInt::Macros","Z80MathInt/Macros.html#method-i-mul8_24","(mh=h, ml=l, m=b, t:c, tt:de, clrahl:true)","<p>Performs multiplication of unsigned 16bit <code>mh</code>|<code>ml</code> * 8bit <code>m</code> and returns result in 24bit <code>a</code>|<code>hl</code>. Optionally …\n"],["mul8_c","Z80MathInt::Macros","Z80MathInt/Macros.html#method-i-mul8_c","(mh=h, ml=l, m=a, tt:de, clrhl:true)","<p>Performs multiplication of unsigned 16bit <code>mh</code>|<code>ml</code> * 8bit <code>m</code> and returns result in <code>hl</code>. Optionally accumulates …\n"],["mul_const8_24","Z80MathInt::Macros","Z80MathInt/Macros.html#method-i-mul_const8_24","(mh=h, ml=l, m=0, t:c, tt:de, clrahl:true)","<p>Performs multiplication of unsigned 16bit <code>mh</code>|<code>ml</code> * 8bit <code>m</code> and returns result in 24bit <code>a</code>|<code>hl</code>. Creates unrolled …\n"],["name=","Z80::Alloc","Z80/Alloc.html#method-i-name-3D","(value)",""],["name=","Z80::Label","Z80/Label.html#method-i-name-3D","(value)","<p>Gives name to no-name label. Do not use it directly.\n"],["names","Z80::Program::Condition","Z80/Program/Condition.html#method-c-names","()",""],["names","Z80::Program::Register","Z80/Program/Register.html#method-c-names","()",""],["neg","Z80::Helpers","Z80/Helpers.html#method-i-neg","(a)",""],["neg16","Z80MathInt::Macros","Z80MathInt/Macros.html#method-i-neg16","(h, l, th:h, tl:l)","<p>Negates <code>h</code>, <code>l</code>.\n<p>Uses: <code>af</code>, <code>h</code>, <code>l</code>.\n<p>T-states: 24\n"],["neg_sintable256_pi_half_no_zero_lo","Z80SinCos::Macros","Z80SinCos/Macros.html#method-i-neg_sintable256_pi_half_no_zero_lo","()","<p>Returns an array of 63 bytes containing the first quarter sinus table, 256-based angle, negated, fractional …\n"],["new","Basic::Line","Basic/Line.html#method-c-new","(line_no, body)",""],["new","Basic::Program","Basic/Program.html#method-c-new","(lines, vars = nil, start = nil)",""],["new","Basic::Tokenizer","Basic/Tokenizer.html#method-c-new","(text, line_index=0, line_offset=0)","<p>Creates new instance of a Basic::Tokenizer.\n<p><code>text</code> must be an UTF-8 encoded, <code>line_index</code> and <code>line_offset</code> …\n"],["new","Basic::Variable","Basic/Variable.html#method-c-new","(type, name, data, dims=nil)",""],["new","Basic::VariableParseError","Basic/VariableParseError.html#method-c-new","(msg=\"Not a variable\")",""],["new","Basic::Vars","Basic/Vars.html#method-c-new","(data='')","<p>Creates an instance of Basic::Vars\n<p>Optionally provide VARS data as a binary string.\n"],["new","Z80::Alloc","Z80/Alloc.html#method-c-new","(label)",""],["new","Z80::Label","Z80/Label.html#method-c-new","(addr, type = 1, reloc = nil, members = nil)","<p>Creates an instance of a label. Do not use it directly. Use Program.data, Program.label, Program.addr …\n"],["new","Z80::Program","Z80/Program.html#method-i-new","(start = 0x0000, *args)","<p>Compiles <strong>program</strong> at <code>start</code> address passing *args to initialize(). Returns compiled instance of a <strong>program</strong> …\n"],["new","Z80::Program::Condition","Z80/Program/Condition.html#method-c-new","(name, opc)",""],["new","Z80::Program::Register","Z80/Program/Register.html#method-c-new","(name, opc)",""],["new","Z80::TAP::HeaderBody","Z80/TAP/HeaderBody.html#method-c-new","(header, body)",""],["new_char_array","Basic::Variable","Basic/Variable.html#method-c-new_char_array","(name, dims, values=nil)","<p>Creates a character array Basic::Variable.\n<p>The <code>strings</code> are parsed by Vars.program_text_to_string only …\n"],["new_code","Z80::TAP::HeaderBody","Z80/TAP/HeaderBody.html#method-c-new_code","(name, code, org)","<p>Creates a HeaderBody of the type <code>TYPE_CODE</code>.\n<p><code>name</code> should contain max 10 ascii characters.\n<p><code>code</code> should be …\n"],["new_for_loop","Basic::Variable","Basic/Variable.html#method-c-new_for_loop","(name, value, limit, step, line, statement)","<p>Creates a FOR loop Basic::Variable.\n"],["new_kernel","Multitasking","Multitasking.html#method-c-new_kernel","()","<p>Instantiate Multitasking kernel with the highest possible starting address\n"],["new_number","Basic::Variable","Basic/Variable.html#method-c-new_number","(name, num, simplified_int=true)","<p>Creates a numeric Basic::Variable.\n"],["new_number_array","Basic::Variable","Basic/Variable.html#method-c-new_number_array","(name, dims, values=nil)","<p>Creates a numeric array Basic::Variable.\n<p><code>dims</code> must be an array of dimension sizes provided as positive …\n"],["new_program","Z80::TAP::HeaderBody","Z80/TAP/HeaderBody.html#method-c-new_program","(name, code, line:nil, prog_length:nil)","<p>Creates a HeaderBody of the type <code>TYPE_PROGRAM</code>.\n<p><code>name</code> should contain max 10 ascii characters.\n<p><code>code</code> should …\n"],["new_string","Basic::Variable","Basic/Variable.html#method-c-new_string","(name, string)","<p>Creates a string Basic::Variable.\n<p>The <code>string</code> is parsed by Vars.program_text_to_string only if encoded …\n"],["new_var_array","Z80::TAP::HeaderBody","Z80/TAP/HeaderBody.html#method-c-new_var_array","(name, code, head)","<p>Creates a HeaderBody of the type <code>TYPE_NUMBER_ARRAY</code> or <code>TYPE_CHAR_ARRAY</code>.\n<p><code>name</code> should contain max 10 ascii …\n"],["next_token","Basic::Tokenizer","Basic/Tokenizer.html#method-i-next_token","()",""],["nextline","ZXGfx::Macros","ZXGfx/Macros.html#method-i-nextline","(ah, al, bcheck = true, **nsopts, &block)","<p>Advances to the next screen line byte address (down) using ah|al registers. (optionally) returns from …\n"],["nextrow","ZXGfx::Macros","ZXGfx/Macros.html#method-i-nextrow","(ah, al, bcheck = true, **nsopts, &block)","<p>Advances to the next text line coordinate (down 8 lines) using ah|al registers. (optionally) returns …\n"],["ns","Z80::Program","Z80/Program.html#method-i-ns","(name = nil, **opts)","<p>Creates a namespace for relocatable labels defined inside your code.\n<p>Give a block which generates z80 …\n"],["number?","Basic::Variable","Basic/Variable.html#method-i-number-3F","()","<p><code>true</code> if variable is a number variable\n"],["number_array?","Basic::Variable","Basic/Variable.html#method-i-number_array-3F","()","<p><code>true</code> if variable is a number array\n"],["one_of?","Z80::Program::Condition","Z80/Program/Condition.html#method-i-one_of-3F","(ary)",""],["one_of?","Z80::Program::Register","Z80/Program/Register.html#method-i-one_of-3F","(ary)",""],["org","Z80::Program","Z80/Program.html#method-i-org","(address = pc, pad = 0, align: 1, offset: 0)","<p>Creates offset from Program.pc to <code>address</code> padding it with <code>pad</code>.\n<p>Do not confuse it with assembler directive …\n"],["pack_number","ZXMath","ZXMath.html#method-c-pack_number","(num, simplified_int=true)","<p>Converts <code>num</code> to a ZX-Spectrum&#39;s real number encoded as a 5-byte binary string.\n<p><code>simplified_int</code> indicates …\n"],["parse_each","Basic::Tokenizer","Basic/Tokenizer.html#method-i-parse_each","(&block)",""],["parse_file","Z80::TAP","Z80/TAP.html#method-c-parse_file","(filename, &block)","<p>Returns an Enumerator of TAP::HeaderBody chunks representing segments of a TAP <code>file</code>. Optionally unwraps …\n"],["parse_file","Z80::TAP","Z80/TAP.html#method-c-parse_file","(filename, &block)","<p>Returns an Enumerator of TAP::HeaderBody chunks representing segments of a TAP <code>file</code>. Optionally unwraps …\n"],["parse_source","Basic","Basic.html#method-c-parse_source","(source, start:nil)","<p>Creates a Basic::Program from a BASIC program text.\n<p>The <code>source</code> should be an UTF-8 encoded string.\n<p>Each …\n"],["parse_source_line","Basic::Line","Basic/Line.html#method-c-parse_source_line","(line_text, last_line_no=0, line_index=0)","<p>Creates a Basic::Line from a provided BASIC program text.\n<p>See: Basic.parse_source\n"],["parse_tap","Z80::TAP","Z80/TAP.html#method-c-parse_tap","(tap, file='-', &block)","<p>Returns an Enumerator of TAP::HeaderBody chunks representing segments of a TAP blob. Optionally unwraps …\n"],["parse_tap","Z80::TAP","Z80/TAP.html#method-c-parse_tap","(tap, file='-', &block)","<p>Returns an Enumerator of TAP::HeaderBody chunks representing segments of a TAP blob. Optionally unwraps …\n"],["pc","Z80::Program","Z80/Program.html#method-i-pc","()","<p>Current program counter relative to 0.\n"],["peek_token","Basic::Tokenizer","Basic/Tokenizer.html#method-i-peek_token","()",""],["pointer?","Z80::Alloc","Z80/Alloc.html#method-i-pointer-3F","()",""],["pointer?","Z80::Label","Z80/Label.html#method-i-pointer-3F","()","<p>Checks if label is a pointer. Prefer using Program.pointer? instead. This method is being used during …\n"],["pointer?","Z80::Program","Z80/Program.html#method-i-pointer-3F","(arg)","<p>Convenient method for macros to check if argument is pointer-like.\n<p>Returns <code>true</code> for:\n\n<pre>[foo], [:foo], [foo ...</pre>\n"],["pointer?","Z80::Program::Register","Z80/Program/Register.html#method-i-pointer-3F","()",""],["prevline","ZXGfx::Macros","ZXGfx/Macros.html#method-i-prevline","(ah, al, bcheck = true, **nsopts, &block)","<p>Moves up to the previous screen line byte address using ah|al registers. (optionally) returns from subroutine …\n"],["program?","Z80::TAP::HeaderBody","Z80/TAP/HeaderBody.html#method-i-program-3F","()","<p><code>true</code> if this chunk represents a basic program\n"],["program_text_to_string","Basic::Vars","Basic/Vars.html#method-c-program_text_to_string","(text)","<p>Converts a UTF-8 Basic program string to a ZX-Basic string variable body.\n"],["rctoattr","ZXGfx::Macros","ZXGfx/Macros.html#method-i-rctoattr","(r, c, h, l, r_already_in_a = false)","<p>Converts row, col text coordinates to attribute address\n<p>Modifies: <code>af</code>, <code>r</code>, <code>c</code>, <code>h</code>, <code>l</code>\n<p><p><code>r</code> &mdash; input register: text …\n"],["rctoscr","ZXGfx::Macros","ZXGfx/Macros.html#method-i-rctoscr","(r, c, h, l, r_already_in_a = false)","<p>Converts row,col text coordinates to screen byte address\n<p>Modifies: <code>af</code>, <code>r</code>, <code>c</code>, <code>h</code>, <code>l</code>\n<p><p><code>r</code> &mdash; input register: text …\n"],["read_arg_string","ZXSys::Macros","ZXSys/Macros.html#method-i-read_arg_string","(adh=d, adl=e, lenh=b, lenl=c)","<p>Read a string address and its length from a ZX Basic&#39;s stringish FP-value.\n<p><code>hl</code> &mdash; must point to the 1st …\n"],["read_chunk","Z80::TAP","Z80/TAP.html#method-c-read_chunk","(filename, name:nil, index:nil)","<p>Reads a TAP::HeaderBody chunk from a TAP file.\n<p>Pass additional <code>:name</code> argument to search for the header …\n"],["read_chunk","Z80::TAP","Z80/TAP.html#method-c-read_chunk","(filename, name:nil, index:nil)","<p>Reads a TAP::HeaderBody chunk from a TAP file.\n<p>Pass additional <code>:name</code> argument to search for the header …\n"],["read_data","Z80::TAP","Z80/TAP.html#method-c-read_data","(filename, **opts)","<p>Reads a data chunk from a TAP file. Returns a binary string.\n<p>Program.import_file uses this method to read …\n"],["read_data","Z80::TAP","Z80/TAP.html#method-c-read_data","(filename, **opts)","<p>Reads a data chunk from a TAP file. Returns a binary string.\n<p>Program.import_file uses this method to read …\n"],["read_integer_value","ZXSys::Macros","ZXSys/Macros.html#method-i-read_integer_value","(th=d, tl=e, sgn=c)","<p>Read a signed integer from a ZX Basic&#39;s FP-value.\n<p><code>hl</code> &mdash; must point to the 1st byte of the FP-value.\n<p><code>th</code> … &mdash; "],["read_positive_int_value","ZXSys::Macros","ZXSys/Macros.html#method-i-read_positive_int_value","(th=d, tl=e)","<p>Read a positive integer from a ZX Basic&#39;s FP-value.\n<p><code>hl</code> &mdash; must point to the 1st byte of the FP-value. …\n"],["read_source","Basic","Basic.html#method-c-read_source","(filename, **opts)","<p>Creates a Basic::Program from a BASIC text file.\n<p>See parse_source for details.\n"],["read_tap","Basic","Basic.html#method-c-read_tap","(filename, **opts)","<p>Creates a Basic::Program or a Basic::Variable from a TAP file.\n<p>See Z80::TAP.read_chunk for arguments description. …\n"],["register?","Z80::Program","Z80/Program.html#method-i-register-3F","(arg)","<p>Convenient method for macros to check if argument is a Register.\n<p>Returns <code>true</code> for:\n\n<pre>hl, a, [hl], [iy + 6]</pre>\n"],["reinitialize","Z80::Alloc","Z80/Alloc.html#method-i-reinitialize","(*args)",""],["reinitialize","Z80::Label","Z80/Label.html#method-i-reinitialize","(address, type = 1, reloc = nil, members = nil)","<p>Reinitializes dummy label. Do not use it directly. This method is being used during program compilation. …\n"],["report_error","ZXSys::Macros","ZXSys/Macros.html#method-i-report_error","(error)","<p>Returns to ZX Basic with the error report.\n<p><p>error &mdash; Error report signature as a number <code>0..9</code> or a letter  …\n\n\n"],["report_error_unless","ZXSys::Macros","ZXSys/Macros.html#method-i-report_error_unless","(condition, error)","<p>Returns to ZX Basic with the error report if condition is NOT met.\n<p><p>condition &mdash; NZ, Z, NC, C, PO, PE, P, …\n\n"],["respond_to_missing?","Z80::Alloc","Z80/Alloc.html#method-i-respond_to_missing-3F","(m, include_private=false)",""],["respond_to_missing?","Z80::Label","Z80/Label.html#method-i-respond_to_missing-3F","(m, include_private=false)",""],["restore_rom_interrupt_handler","ZXSys::Macros","ZXSys/Macros.html#method-i-restore_rom_interrupt_handler","(enable_interrupts:true)","<p>Restore interrupt handler ZX Spectrum ROM&#39;s standard IM1 mode.\n<p><p>enable_interrupts &mdash; If <code>true</code> invoke <code>ei</code> …\n\n\n"],["rnd","Z80MathInt::Macros","Z80MathInt/Macros.html#method-i-rnd","()","<p>Lehmer random number generator.\n<p>See: en.wikipedia.org/wiki/Lehmer_random_number_generator\n<p>Routine uses …\n"],["save_tap","Z80::TAP","Z80/TAP.html#method-i-save_tap","(filename, append:false, name:nil, **opts)","<p>Saves self in a TAP file.\n<p>The tap data is being generated by #to_tap_chunk.\n<p><code>filename</code> specifies the file …\n"],["save_tap","Z80::TAP","Z80/TAP.html#method-i-save_tap","(filename, append:false, name:nil, **opts)","<p>Saves self in a TAP file.\n<p>The tap data is being generated by #to_tap_chunk.\n<p><code>filename</code> specifies the file …\n"],["save_tap","Z80::TAP::HeaderBody","Z80/TAP/HeaderBody.html#method-i-save_tap","(filename, append:false)","<p>Saves this chunk as a TAP file.\n<p><code>filename</code> specifies the file name to save to. The “.tap” extension …\n"],["screen?","Z80::TAP::HeaderBody","Z80/TAP/HeaderBody.html#method-i-screen-3F","()","<p><code>true</code> if this chunk represents a screen data\n"],["scrtoattr","ZXGfx::Macros","ZXGfx/Macros.html#method-i-scrtoattr","(i, o=i)","<p>Converts hi byte screen address to attribute address\n<p>Modifies: <code>af</code>, <code>o</code>\n<p><code>i</code>: input register: hi byte screen …\n"],["setup_custom_interrupt_handler","ZXSys::Macros","ZXSys/Macros.html#method-i-setup_custom_interrupt_handler","(handler, enable_interrupts:true)","<p>Setup custom interrupt handler using ZX Spectrum ROM&#39;s unused space as a IM2 mode jump table.\n<p><p>handler … &mdash; "],["shuffle_bytes_source_max256","Z80Shuffle::Macros","Z80Shuffle/Macros.html#method-i-shuffle_bytes_source_max256","(next_rng, target:hl, length:a, source:nil)","<p>Shuffles an array of bytes.\n\n<pre>for i from 0 to length − 1 do\n    j ← random integer such that 0 ≤ j ≤ i\n ...</pre>\n"],["sincos_from_angle","Z80SinCos::Macros","Z80SinCos/Macros.html#method-i-sincos_from_angle","(sincos, th=h, tl=l)","<p>Code that returns an address of SinCos entry for a given 256-based angle in register <code>a</code>.\n<p>Mofifies: <code>af</code>, …\n"],["sincos_table_descriptors","Z80SinCos::Macros","Z80SinCos/Macros.html#method-i-sincos_table_descriptors","()","<p>Returns a SinCosTable descriptors.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">sincos</span> <span class=\"ruby-identifier\">data</span> <span class=\"ruby-constant\">SinCosTable</span>, <span class=\"ruby-identifier\">sincos_table_descriptors</span>\n</pre>\n"],["size","Z80::Program::Register","Z80/Program/Register.html#method-i-size","()",""],["split","Z80::Program::Register","Z80/Program/Register.html#method-i-split","()","<p>Disjoins one of 16 bit registers: <code>bc</code> <code>de</code> <code>hl</code> <code>ix</code> or <code>iy</code> to array of 8bit registers: [<code>hi</code>, <code>lo</code>].\n<p>Usefull when …\n"],["statement","Basic::Variable","Basic/Variable.html#method-i-statement","()","<p>Returns the FOR loop execute statement number.\n"],["step","Basic::Variable","Basic/Variable.html#method-i-step","()","<p>Returns the FOR loop step value.\n"],["string?","Basic::Variable","Basic/Variable.html#method-i-string-3F","()","<p><code>true</code> if variable is a string variable\n"],["string_to_program_text","Basic::Vars","Basic/Vars.html#method-c-string_to_program_text","(data, ascii_only:false)","<p>Converts a ZX-Basic&#39;s string variable body to a UTF-8 Basic program text.\n"],["sub_from","Z80MathInt::Macros","Z80MathInt/Macros.html#method-i-sub_from","(r, h, l)","<p>Subtracts <code>r</code> from <code>h</code>, <code>l</code>.\n<p>Uses: <code>af</code>, <code>r</code>, <code>h</code>, <code>l</code>, preserves <code>r</code>.\n<p>Note:\n"],["task_id","Multitasking::Macros","Multitasking/Macros.html#method-i-task_id","(oh, ol, tt:hl)","<p>Retrieves current task&#39;s id.\n<p><p><code>oh</code>, <code>ol</code> &mdash; Hi and lo byte register for output.\n\n<p><p><code>tt</code> &mdash; Temporary 16bit register, …\n"],["task_stack_free_bytes","Multitasking::Macros","Multitasking/Macros.html#method-i-task_stack_free_bytes","(tt:hl, positive_size:true, disable_intr:true, enable_intr:true)","<p>Calculates how many bytes are available yet on the task&#39;s stack below SP.\n<p><p><code>tt</code> &mdash; Temporary 16bit register, …\n\n"],["terminated?","Basic::Tokenizer","Basic/Tokenizer.html#method-i-terminated-3F","()",""],["text","Basic::Line","Basic/Line.html#method-i-text","(escape_keywords:false, ascii_only:false)","<p>Creates a textual representation of this line except its number. Returns an UTF-8 encoded string.\n<p>See: …\n"],["to_a","Basic::Vars","Basic/Vars.html#method-i-to_a","()","<p>Returns an array of every Basic::Variable found in self.\n"],["to_alloc","Z80::Alloc","Z80/Alloc.html#method-i-to_alloc","()",""],["to_alloc","Z80::Label","Z80/Label.html#method-i-to_alloc","()",""],["to_data","Z80::Label","Z80/Label.html#method-c-to_data","(prog, offset, data)","<p>Used by Program.data. Do not use it directly. data must be a Hash, Array, String or convertible Object …\n"],["to_debug","Z80::Program::Register","Z80/Program/Register.html#method-i-to_debug","()",""],["to_i","Z80::Alloc","Z80/Alloc.html#method-i-to_i","(start = 0, rel_to = nil)",""],["to_i","Z80::Label","Z80/Label.html#method-c-to_i","()",""],["to_i","Z80::Label","Z80/Label.html#method-i-to_i","(start = 0, rel_to = nil)","<p>Evaluates label. Do not use it directly. This method is being used during program compilation.\n"],["to_i","Z80::Program::Condition","Z80/Program/Condition.html#method-i-to_i","()",""],["to_i","Z80::Program::Register","Z80/Program/Register.html#method-i-to_i","()",""],["to_label","Symbol","Symbol.html#method-i-to_label","(program)","<p>Allows to use Symbols instead of labels in some situations. Example:\n\n<pre>loop1 add [hl]\n      inc hl\n     ...</pre>\n"],["to_label","Z80::Alloc","Z80/Alloc.html#method-i-to_label","(_)",""],["to_label","Z80::Label","Z80/Label.html#method-i-to_label","(_)",""],["to_name","Z80::Alloc","Z80/Alloc.html#method-i-to_name","()",""],["to_name","Z80::Label","Z80/Label.html#method-i-to_name","()","<p>Returns label name or <code>nil</code>.\n"],["to_s","Basic::Line","Basic/Line.html#method-i-to_s","(**opts)","<p>Creates a textual representation of this line with the line number. Returns an UTF-8 encoded string. …\n"],["to_s","Basic::Program","Basic/Program.html#method-i-to_s","(escape_keywords:false, ascii_only:false)",""],["to_s","Basic::Variable","Basic/Variable.html#method-i-to_s","()","<p>Returns this variable in a BASIC-like text format.\n"],["to_s","Basic::Vars","Basic/Vars.html#method-i-to_s","()","<p>Returns all variables in a BASIC-like text format.\n"],["to_s","Z80::Alloc","Z80/Alloc.html#method-i-to_s","()",""],["to_s","Z80::Label","Z80/Label.html#method-i-to_s","()",""],["to_s","Z80::TAP::HeaderBody","Z80/TAP/HeaderBody.html#method-i-to_s","()","<p>For humans.\n"],["to_source","Basic::Program","Basic/Program.html#method-i-to_source","(escape_keywords:false, ascii_only:false)","<p>Creates the textual representation of a ZX Basic::Program.\n<p>Returns an UTF-8 encoded string.\n<p>The conversion …\n"],["to_str","Z80::Alloc","Z80/Alloc.html#method-i-to_str","()",""],["to_str","Z80::Label","Z80/Label.html#method-i-to_str","()",""],["to_tap","Z80::TAP","Z80/TAP.html#method-i-to_tap","(name, **opts)","<p>Produces a TAP blob as a binary string from self.\n<p>A sugar for calling TAP::HeaderBody#to_tap method on …\n"],["to_tap","Z80::TAP","Z80/TAP.html#method-i-to_tap","(name, **opts)","<p>Produces a TAP blob as a binary string from self.\n<p>A sugar for calling TAP::HeaderBody#to_tap method on …\n"],["to_tap","Z80::TAP::HeaderBody","Z80/TAP/HeaderBody.html#method-i-to_tap","()","<p>Produces a TAP blob as a binary string from this chunk.\n"],["to_tap_chunk","Basic::Program","Basic/Program.html#method-i-to_tap_chunk","(name, line:nil)","<p>Creates a Z80::TAP::HeaderBody instance from Basic::Program#code.\n<p>This method is provided for the included …\n"],["to_tap_chunk","Basic::Variable","Basic/Variable.html#method-i-to_tap_chunk","(name, org:nil)","<p>Creates a Z80::TAP::HeaderBody instance from Basic::Variable.\n<p>This method is provided for the included …\n"],["to_tap_chunk","Z80::TAP","Z80/TAP.html#method-i-to_tap_chunk","(name, org:nil)","<p>Creates a TAP::HeaderBody chunk from self.\n<p>By default it uses Z80#code and the Z80#org to produce the …\n"],["to_tap_chunk","Z80::TAP","Z80/TAP.html#method-i-to_tap_chunk","(name, org:nil)","<p>Creates a TAP::HeaderBody chunk from self.\n<p>By default it uses Z80#code and the Z80#org to produce the …\n"],["to_z80bin","Float","Float.html#method-i-to_z80bin","(simplified_int=true)","<p>Converts <code>Float</code> to a ZX-Spectrum&#39;s real number encoded as a 5-byte binary string.\n<p>Suitable to be used …\n"],["union","Z80::Program","Z80/Program.html#method-i-union","(label, type)","<p>Creates a label at <code>label</code> of different <code>type</code>.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">foo</span> <span class=\"ruby-identifier\">label</span>\n<span class=\"ruby-identifier\">bar</span> <span class=\"ruby-identifier\">union</span> <span class=\"ruby-identifier\">foo</span>, <span class=\"ruby-value\">2</span>\n</pre>\n"],["unknown","ZXMath","ZXMath.html#method-i-unknown","","<p>Call <code>print_fp_hl</code> with <code>hl</code> pointing to the 1st byte of a <code>ZXReal</code> number to print that number to the currently …\n"],["unpack_number","ZXMath","ZXMath.html#method-c-unpack_number","(bin, simplified_int_as_fixnum=true)","<p>Converts a ZX-Spectrum&#39;s real number as a 5-byte binary string to <code>Numeric</code> value.\n<p><code>simplified_int_as_fixnum</code> …\n"],["unwrap_pointer","Z80::Program","Z80/Program.html#method-i-unwrap_pointer","(arg)","<p>Return normalized pointer-like label, Register or a integer. Otherwise pass-through.\n<p>Convenient method …\n"],["utobcd","Z80MathInt::Macros","Z80MathInt/Macros.html#method-i-utobcd","(bufend, input, size: 4, r: d, rr: de)","<p>Converts arbitrary size unsigned integer (LSB) to bcd\n<p>Uses: <code>a</code>, <code>b</code>, <code>rr</code>, <code>bc&#39;</code>, <code>hl&#39;</code>, <code>r&#39;</code>\n<p>After conversion …\n"],["utobcd_step","Z80MathInt::Macros","Z80MathInt/Macros.html#method-i-utobcd_step","(bufend, r, buflen=1, t=c, r_in_a=false)","<p>Convert a 8-bit unsigned integer to bcd allows for arbitrary integer size conversion.\n<p>Used by <code>utobcd</code>. …\n"],["value","Basic::Variable","Basic/Variable.html#method-i-value","()","<p>Returns a value of a variable.\n<p>A Float or an Integer for numbers (including FOR loops).\n<p>A (possibly nested) …\n"],["with_saved","Z80::Program::Macros","Z80/Program/Macros.html#method-i-with_saved","(*registers, **opts, &block)","<p>Saves specified registers on a machine stack, evaluates block wrapped around a namespace and restores …\n"],["word","Z80::Label","Z80/Label.html#method-c-word","(size = 1)","<p>Struct definition type.\n"],["words","Z80::Program","Z80/Program.html#method-i-words","(*args)","<p>Creates a label and allocate words with Program.data.\n<p>Sugar for:\n\n<pre>data 2, ...</pre>\n"],["xy_to_pixel_addr","ZXGfx::Macros","ZXGfx/Macros.html#method-i-xy_to_pixel_addr","(x, y)","<p>Calculate constant screen address from x, y pixel position\n"],["xytoscr","ZXGfx::Macros","ZXGfx/Macros.html#method-i-xytoscr","(y, x, h, l, s, t)","<p>Converts x,y coordinates to screen byte address and bits shift\n<p>Modifies: <code>af</code>, <code>y</code>, <code>x</code>, <code>s</code>, <code>t</code>\n<p><p><code>y</code> &mdash; input register: …\n"],["ytoscr","ZXGfx::Macros","ZXGfx/Macros.html#method-i-ytoscr","(y, h, l, t, col=nil)","<p>Converts 0,y coordinates to screen byte address\n<p>Modifies: <code>af</code>, <code>y</code>, <code>h</code>, <code>l</code>, <code>t</code>\n<p><p><code>y</code> &mdash; input register: vertical-coordinate …\n"],["|","Z80::Program::Register","Z80/Program/Register.html#method-i-7C","(other)","<p>Adjoins two 8 bit registers to form one 16 bit register.\n<p>Usefull when defining macros that may use registers …\n"],["README","","README_rdoc.html","","<p>ruby-Z80\n<p>A Z80 assembler powered by ruby.\n<p>Author &mdash; Rafał Michalski\n"]]}}